;(function($) {
"use strict";

/**
 * Show fields associated with the selected message type
 *
 * @param {string} selector the div that holds the radio fields
 */
function showTypeField(selector) {
  var value = $('input[type="radio"]:checked', selector).val();
  $('.cmb2-message-type').hide();
  $('.cmb2-message-type-' + value).show();
}
/**
 * Whether we need the maximum screen width text field or not
 *
 * @param {string} selector the div that holds the checkboxes
 * @param {string} current  the currently checked item
 */


function showHideMaximumScreen(selector, current) {
  if ('undefined' === typeof current) {
    current = $('input[type="checkbox"]:checked', selector);
  }

  if ($('input[type="checkbox"]', selector).is(':checked')) {
    $('input[type="checkbox"]:checked', selector).closest('.cmb-field-list').find('.cmb2-maximum-screen-width').hide();
  } else {
    $('input[type="checkbox"]', selector).closest('.cmb-field-list').find('.cmb2-maximum-screen-width').show();
  }
}
/**
 * Whether we need the custom maximum banner width fields
 *
 * @param {string} value the value of the maximum width <select> field
 */


function showHideMaximumBanner(value) {
  if ('custom' === value) {
    $('.cmb2-custom-maximum-banner-width').show();
  } else {
    $('.cmb2-custom-maximum-banner-width').hide();
  }
}
/**
 * Set up the message admin fields. This runs when a "screen size" gets added to the form
 */


function setupMessage() {
  var typeSelector = $('.cmb2-message-type-selector');
  var noMaxScreenSelector = $('.cmb2-no-maximum-screen-width');
  var maxBannerWidthSelector = '.cmb2-maximum-banner-width select';

  if (typeSelector.length > 0) {
    showTypeField(typeSelector);
    $('input[type="radio"]', typeSelector).on('change', function () {
      showTypeField(typeSelector);
    });
  }

  if (noMaxScreenSelector.length > 0) {
    showHideMaximumScreen(noMaxScreenSelector);
    $('input[type="checkbox"]', noMaxScreenSelector).on('change', function (el) {
      showHideMaximumScreen(noMaxScreenSelector, el);
    });
  }

  if ($(maxBannerWidthSelector).length > 0) {
    showHideMaximumBanner($(maxBannerWidthSelector).val());
    $(document).on('change', maxBannerWidthSelector, function () {
      showHideMaximumBanner($(this).val());
    });
  }

  $('.cmb-type-checkbox:hidden input:checkbox').prop('checked', false);
  $('.cmb-type-select:hidden option:selected').removeAttr('selected');
  $('.cmb-type-text:hidden input[type="text"]').val();
}
/**
 * When "add another screen size" runs, it adds a CMB2 row to the form. Set up the message form.
 */


$(document).on('cmb2_add_row', function () {
  setupMessage();
});
/**
 * When jQuery loads, remove some default WP fields and set up the message form
 */

$(document).ready(function () {
  $('#pageparentdiv label[for=parent_id]').parents('p').eq(0).remove();
  $('#pageparentdiv select#parent_id').remove();
  setupMessage();
});
/**
 * Make the various <select> fields into select2 fields
 */

if (jQuery.fn.select2) {
  $('.cmb2-insertable-message select').select2(); // Before a new group row is added, destroy Select2. We'll reinitialise after the row is added

  $('.cmb-repeatable-group').on('cmb2_add_group_row_start', function (event, instance) {
    var $table = $(document.getElementById($(instance).data('selector')));
    var $oldRow = $table.find('.cmb-repeatable-grouping').last();
    $oldRow.find('.cmb2_select').each(function () {
      $(this).select2('destroy');
    });
  }); // When a new group row is added, clear selection and initialise Select2

  $('.cmb-repeatable-group').on('cmb2_add_row', function (event, newRow) {
    $(newRow).find('.cmb2_select').each(function () {
      $('option:selected', this).removeAttr('selected');
      $(this).select2();
    }); // if it's a custom multiselect cmb2 field, make sure to clear the value because that appears to work differently

    $(newRow).find('.cmb2_multi_select').each(function () {
      $(this).val([]).change();
      $(this).select2('val', '');
    }); // Reinitialise the field we previously destroyed

    $(newRow).prev().find('.cmb2_select').each(function () {
      $(this).select2();
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lc3NhZ2VzLmpzIl0sIm5hbWVzIjpbInNob3dUeXBlRmllbGQiLCJzZWxlY3RvciIsInZhbHVlIiwiJCIsInZhbCIsImhpZGUiLCJzaG93Iiwic2hvd0hpZGVNYXhpbXVtU2NyZWVuIiwiY3VycmVudCIsImlzIiwiY2xvc2VzdCIsImZpbmQiLCJzaG93SGlkZU1heGltdW1CYW5uZXIiLCJzZXR1cE1lc3NhZ2UiLCJ0eXBlU2VsZWN0b3IiLCJub01heFNjcmVlblNlbGVjdG9yIiwibWF4QmFubmVyV2lkdGhTZWxlY3RvciIsImxlbmd0aCIsIm9uIiwiZWwiLCJkb2N1bWVudCIsInByb3AiLCJyZW1vdmVBdHRyIiwicmVhZHkiLCJwYXJlbnRzIiwiZXEiLCJyZW1vdmUiLCJqUXVlcnkiLCJmbiIsInNlbGVjdDIiLCJldmVudCIsImluc3RhbmNlIiwiJHRhYmxlIiwiZ2V0RWxlbWVudEJ5SWQiLCJkYXRhIiwiJG9sZFJvdyIsImxhc3QiLCJlYWNoIiwibmV3Um93IiwiY2hhbmdlIiwicHJldiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0EsYUFBVCxDQUF3QkMsUUFBeEIsRUFBbUM7QUFDbEMsTUFBTUMsS0FBSyxHQUFHQyxDQUFDLENBQUUsNkJBQUYsRUFBaUNGLFFBQWpDLENBQUQsQ0FBNkNHLEdBQTdDLEVBQWQ7QUFDQUQsRUFBQUEsQ0FBQyxDQUFFLG9CQUFGLENBQUQsQ0FBMEJFLElBQTFCO0FBQ0FGLEVBQUFBLENBQUMsQ0FBRSx3QkFBd0JELEtBQTFCLENBQUQsQ0FBbUNJLElBQW5DO0FBQ0E7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFNBQVNDLHFCQUFULENBQWdDTixRQUFoQyxFQUEwQ08sT0FBMUMsRUFBb0Q7QUFDbkQsTUFBSyxnQkFBZ0IsT0FBT0EsT0FBNUIsRUFBc0M7QUFDckNBLElBQUFBLE9BQU8sR0FBR0wsQ0FBQyxDQUFFLGdDQUFGLEVBQW9DRixRQUFwQyxDQUFY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RixDQUVRLFlBQVk7QUFDbEJsQyxNQUFBQSxDQUFDLENBQUUsaUJBQUYsRUFBcUIsSUFBckIsQ0FBRCxDQUE2Qm1CLFVBQTdCLENBQXlDLFVBQXpDO0FBQ0FuQixNQUFBQSxDQUFDLENBQUUsSUFBRixDQUFELENBQVUwQixPQUFWO0FBQ0EsS0FMRixFQUQwQixDQVExQjs7QUFDQTFCLElBQUFBLENBQUMsQ0FBRW1DLE1BQUYsQ0FBRCxDQUNFM0IsSUFERixDQUNRLG9CQURSLEVBRUUwQixJQUZGLENBRVEsWUFBWTtBQUNsQmxDLE1BQUFBLENBQUMsQ0FBRSxJQUFGLENBQUQsQ0FBVUMsR0FBVixDQUFlLEVBQWYsRUFBb0JtQyxNQUFwQjtBQUNBcEMsTUFBQUEsQ0FBQyxDQUFFLElBQUYsQ0FBRCxDQUFVMEIsT0FBVixDQUFtQixLQUFuQixFQUEwQixFQUExQjtBQUNBLEtBTEYsRUFUMEIsQ0FnQjFCOztBQUNBMUIsSUFBQUEsQ0FBQyxDQUFFbUMsTUFBRixDQUFELENBQ0VFLElBREYsR0FFRTdCLElBRkYsQ0FFUSxjQUZSLEVBR0UwQixJQUhGLENBR1EsWUFBWTtBQUNsQmxDLE1BQUFBLENBQUMsQ0FBRSxJQUFGLENBQUQsQ0FBVTBCLE9BQVY7QUFDQSxLQUxGO0FBTUEsR0F6QkY7QUEyQkEiLCJmaWxlIjoid3AtbWVzc2FnZS1pbnNlcnRlci1wbHVnaW4tYWRtaW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNob3cgZmllbGRzIGFzc29jaWF0ZWQgd2l0aCB0aGUgc2VsZWN0ZWQgbWVzc2FnZSB0eXBlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIHRoZSBkaXYgdGhhdCBob2xkcyB0aGUgcmFkaW8gZmllbGRzXG4gKi9cbmZ1bmN0aW9uIHNob3dUeXBlRmllbGQoIHNlbGVjdG9yICkge1xuXHRjb25zdCB2YWx1ZSA9ICQoICdpbnB1dFt0eXBlPVwicmFkaW9cIl06Y2hlY2tlZCcsIHNlbGVjdG9yICkudmFsKCk7XG5cdCQoICcuY21iMi1tZXNzYWdlLXR5cGUnICkuaGlkZSgpO1xuXHQkKCAnLmNtYjItbWVzc2FnZS10eXBlLScgKyB2YWx1ZSApLnNob3coKTtcbn1cblxuLyoqXG4gKiBXaGV0aGVyIHdlIG5lZWQgdGhlIG1heGltdW0gc2NyZWVuIHdpZHRoIHRleHQgZmllbGQgb3Igbm90XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yIHRoZSBkaXYgdGhhdCBob2xkcyB0aGUgY2hlY2tib3hlc1xuICogQHBhcmFtIHtzdHJpbmd9IGN1cnJlbnQgIHRoZSBjdXJyZW50bHkgY2hlY2tlZCBpdGVtXG4gKi9cbmZ1bmN0aW9uIHNob3dIaWRlTWF4aW11bVNjcmVlbiggc2VsZWN0b3IsIGN1cnJlbnQgKSB7XG5cdGlmICggJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiBjdXJyZW50ICkge1xuXHRcdGN1cnJlbnQgPSAkKCAnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdOmNoZWNrZWQnLCBzZWxlY3RvciApO1xuXHR9XG5cdGlmICggJCggJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXScsIHNlbGVjdG9yICkuaXMoICc6Y2hlY2tlZCcgKSApIHtcblx0XHQkKCAnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdOmNoZWNrZWQnLCBzZWxlY3RvciApXG5cdFx0XHQuY2xvc2VzdCggJy5jbWItZmllbGQtbGlzdCcgKVxuXHRcdFx0LmZpbmQoICcuY21iMi1tYXhpbXVtLXNjcmVlbi13aWR0aCcgKVxuXHRcdFx0LmhpZGUoKTtcblx0fSBlbHNlIHtcblx0XHQkKCAnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJywgc2VsZWN0b3IgKVxuXHRcdFx0LmNsb3Nlc3QoICcuY21iLWZpZWxkLWxpc3QnIClcblx0XHRcdC5maW5kKCAnLmNtYjItbWF4aW11bS1zY3JlZW4td2lkdGgnIClcblx0XHRcdC5zaG93KCk7XG5cdH1cbn1cblxuLyoqXG4gKiBXaGV0aGVyIHdlIG5lZWQgdGhlIGN1c3RvbSBtYXhpbXVtIGJhbm5lciB3aWR0aCBmaWVsZHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgdGhlIHZhbHVlIG9mIHRoZSBtYXhpbXVtIHdpZHRoIDxzZWxlY3Q+IGZpZWxkXG4gKi9cbmZ1bmN0aW9uIHNob3dIaWRlTWF4aW11bUJhbm5lciggdmFsdWUgKSB7XG5cdGlmICggJ2N1c3RvbScgPT09IHZhbHVlICkge1xuXHRcdCQoICcuY21iMi1jdXN0b20tbWF4aW11bS1iYW5uZXItd2lkdGgnICkuc2hvdygpO1xuXHR9IGVsc2Uge1xuXHRcdCQoICcuY21iMi1jdXN0b20tbWF4aW11bS1iYW5uZXItd2lkdGgnICkuaGlkZSgpO1xuXHR9XG59XG5cbi8qKlxuICogU2V0IHVwIHRoZSBtZXNzYWdlIGFkbWluIGZpZWxkcy4gVGhpcyBydW5zIHdoZW4gYSBcInNjcmVlbiBzaXplXCIgZ2V0cyBhZGRlZCB0byB0aGUgZm9ybVxuICovXG5mdW5jdGlvbiBzZXR1cE1lc3NhZ2UoKSB7XG5cdGNvbnN0IHR5cGVTZWxlY3RvciA9ICQoICcuY21iMi1tZXNzYWdlLXR5cGUtc2VsZWN0b3InICk7XG5cdGNvbnN0IG5vTWF4U2NyZWVuU2VsZWN0b3IgPSAkKCAnLmNtYjItbm8tbWF4aW11bS1zY3JlZW4td2lkdGgnICk7XG5cdGNvbnN0IG1heEJhbm5lcldpZHRoU2VsZWN0b3IgPSAnLmNtYjItbWF4aW11bS1iYW5uZXItd2lkdGggc2VsZWN0Jztcblx0aWYgKCB0eXBlU2VsZWN0b3IubGVuZ3RoID4gMCApIHtcblx0XHRzaG93VHlwZUZpZWxkKCB0eXBlU2VsZWN0b3IgKTtcblx0XHQkKCAnaW5wdXRbdHlwZT1cInJhZGlvXCJdJywgdHlwZVNlbGVjdG9yICkub24oICdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRzaG93VHlwZUZpZWxkKCB0eXBlU2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cblx0aWYgKCBub01heFNjcmVlblNlbGVjdG9yLmxlbmd0aCA+IDAgKSB7XG5cdFx0c2hvd0hpZGVNYXhpbXVtU2NyZWVuKCBub01heFNjcmVlblNlbGVjdG9yICk7XG5cdFx0JCggJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXScsIG5vTWF4U2NyZWVuU2VsZWN0b3IgKS5vbihcblx0XHRcdCdjaGFuZ2UnLFxuXHRcdFx0ZnVuY3Rpb24gKCBlbCApIHtcblx0XHRcdFx0c2hvd0hpZGVNYXhpbXVtU2NyZWVuKCBub01heFNjcmVlblNlbGVjdG9yLCBlbCApO1xuXHRcdFx0fVxuXHRcdCk7XG5cdH1cblx0aWYgKCAkKCBtYXhCYW5uZXJXaWR0aFNlbGVjdG9yICkubGVuZ3RoID4gMCApIHtcblx0XHRzaG93SGlkZU1heGltdW1CYW5uZXIoICQoIG1heEJhbm5lcldpZHRoU2VsZWN0b3IgKS52YWwoKSApO1xuXHRcdCQoIGRvY3VtZW50ICkub24oICdjaGFuZ2UnLCBtYXhCYW5uZXJXaWR0aFNlbGVjdG9yLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRzaG93SGlkZU1heGltdW1CYW5uZXIoICQoIHRoaXMgKS52YWwoKSApO1xuXHRcdH0gKTtcblx0fVxuXHQkKCAnLmNtYi10eXBlLWNoZWNrYm94OmhpZGRlbiBpbnB1dDpjaGVja2JveCcgKS5wcm9wKCAnY2hlY2tlZCcsIGZhbHNlICk7XG5cdCQoICcuY21iLXR5cGUtc2VsZWN0OmhpZGRlbiBvcHRpb246c2VsZWN0ZWQnICkucmVtb3ZlQXR0ciggJ3NlbGVjdGVkJyApO1xuXHQkKCAnLmNtYi10eXBlLXRleHQ6aGlkZGVuIGlucHV0W3R5cGU9XCJ0ZXh0XCJdJyApLnZhbCgpO1xufVxuXG4vKipcbiAqIFdoZW4gXCJhZGQgYW5vdGhlciBzY3JlZW4gc2l6ZVwiIHJ1bnMsIGl0IGFkZHMgYSBDTUIyIHJvdyB0byB0aGUgZm9ybS4gU2V0IHVwIHRoZSBtZXNzYWdlIGZvcm0uXG4gKi9cbiQoIGRvY3VtZW50ICkub24oICdjbWIyX2FkZF9yb3cnLCBmdW5jdGlvbiAoKSB7XG5cdHNldHVwTWVzc2FnZSgpO1xufSApO1xuXG4vKipcbiAqIFdoZW4galF1ZXJ5IGxvYWRzLCByZW1vdmUgc29tZSBkZWZhdWx0IFdQIGZpZWxkcyBhbmQgc2V0IHVwIHRoZSBtZXNzYWdlIGZvcm1cbiAqL1xuJCggZG9jdW1lbnQgKS5yZWFkeSggZnVuY3Rpb24gKCkge1xuXHQkKCAnI3BhZ2VwYXJlbnRkaXYgbGFiZWxbZm9yPXBhcmVudF9pZF0nICkucGFyZW50cyggJ3AnICkuZXEoIDAgKS5yZW1vdmUoKTtcblx0JCggJyNwYWdlcGFyZW50ZGl2IHNlbGVjdCNwYXJlbnRfaWQnICkucmVtb3ZlKCk7XG5cdHNldHVwTWVzc2FnZSgpO1xufSApO1xuXG4vKipcbiAqIE1ha2UgdGhlIHZhcmlvdXMgPHNlbGVjdD4gZmllbGRzIGludG8gc2VsZWN0MiBmaWVsZHNcbiAqL1xuaWYgKCBqUXVlcnkuZm4uc2VsZWN0MiApIHtcblx0JCggJy5jbWIyLWluc2VydGFibGUtbWVzc2FnZSBzZWxlY3QnICkuc2VsZWN0MigpO1xuXG5cdC8vIEJlZm9yZSBhIG5ldyBncm91cCByb3cgaXMgYWRkZWQsIGRlc3Ryb3kgU2VsZWN0Mi4gV2UnbGwgcmVpbml0aWFsaXNlIGFmdGVyIHRoZSByb3cgaXMgYWRkZWRcblx0JCggJy5jbWItcmVwZWF0YWJsZS1ncm91cCcgKS5vbihcblx0XHQnY21iMl9hZGRfZ3JvdXBfcm93X3N0YXJ0Jyxcblx0XHRmdW5jdGlvbiAoIGV2ZW50LCBpbnN0YW5jZSApIHtcblx0XHRcdGNvbnN0ICR0YWJsZSA9ICQoXG5cdFx0XHRcdGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCAkKCBpbnN0YW5jZSApLmRhdGEoICdzZWxlY3RvcicgKSApXG5cdFx0XHQpO1xuXHRcdFx0Y29uc3QgJG9sZFJvdyA9ICR0YWJsZS5maW5kKCAnLmNtYi1yZXBlYXRhYmxlLWdyb3VwaW5nJyApLmxhc3QoKTtcblxuXHRcdFx0JG9sZFJvdy5maW5kKCAnLmNtYjJfc2VsZWN0JyApLmVhY2goIGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0JCggdGhpcyApLnNlbGVjdDIoICdkZXN0cm95JyApO1xuXHRcdFx0fSApO1xuXHRcdH1cblx0KTtcblxuXHQvLyBXaGVuIGEgbmV3IGdyb3VwIHJvdyBpcyBhZGRlZCwgY2xlYXIgc2VsZWN0aW9uIGFuZCBpbml0aWFsaXNlIFNlbGVjdDJcblx0JCggJy5jbWItcmVwZWF0YWJsZS1ncm91cCcgKS5vbihcblx0XHQnY21iMl9hZGRfcm93Jyxcblx0XHRmdW5jdGlvbiAoIGV2ZW50LCBuZXdSb3cgKSB7XG5cdFx0XHQkKCBuZXdSb3cgKVxuXHRcdFx0XHQuZmluZCggJy5jbWIyX3NlbGVjdCcgKVxuXHRcdFx0XHQuZWFjaCggZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdCQoICdvcHRpb246c2VsZWN0ZWQnLCB0aGlzICkucmVtb3ZlQXR0ciggJ3NlbGVjdGVkJyApO1xuXHRcdFx0XHRcdCQoIHRoaXMgKS5zZWxlY3QyKCk7XG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0Ly8gaWYgaXQncyBhIGN1c3RvbSBtdWx0aXNlbGVjdCBjbWIyIGZpZWxkLCBtYWtlIHN1cmUgdG8gY2xlYXIgdGhlIHZhbHVlIGJlY2F1c2UgdGhhdCBhcHBlYXJzIHRvIHdvcmsgZGlmZmVyZW50bHlcblx0XHRcdCQoIG5ld1JvdyApXG5cdFx0XHRcdC5maW5kKCAnLmNtYjJfbXVsdGlfc2VsZWN0JyApXG5cdFx0XHRcdC5lYWNoKCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0JCggdGhpcyApLnZhbCggW10gKS5jaGFuZ2UoKTtcblx0XHRcdFx0XHQkKCB0aGlzICkuc2VsZWN0MiggJ3ZhbCcsICcnICk7XG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0Ly8gUmVpbml0aWFsaXNlIHRoZSBmaWVsZCB3ZSBwcmV2aW91c2x5IGRlc3Ryb3llZFxuXHRcdFx0JCggbmV3Um93IClcblx0XHRcdFx0LnByZXYoKVxuXHRcdFx0XHQuZmluZCggJy5jbWIyX3NlbGVjdCcgKVxuXHRcdFx0XHQuZWFjaCggZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdCQoIHRoaXMgKS5zZWxlY3QyKCk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cdCk7XG59XG4iXX0=
}(jQuery));
