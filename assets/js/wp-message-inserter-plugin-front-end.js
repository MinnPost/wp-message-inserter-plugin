"use strict";

/**
 * Sets cookies
 *
 * @param {string} name
 * @param {string} value
 * @param {number} days
 */
function setCookie(name, value, days) {
  const d = new Date();
  d.setTime(d.getTime() + 86400000 * days);
  document.cookie = name + '=' + value + ';path=/;expires=' + d.toGMTString();
}

/**
 * Reads cookies
 *
 * @param {string} name
 */
function getCookie(name) {
  const value = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');
  return value ? value[2] : null;
}

/**
 * Allow our theme or other plugins to create analytics tracking events
 *
 * @param {string}  type
 * @param {string}  category
 * @param {string}  action
 * @param {string}  label
 * @param {Array}   value
 * @param {boolean} nonInteraction
 */
function analyticsTrackingEvent(type, category, action, label, value, nonInteraction) {
  if (typeof wp !== 'undefined') {
    category = 'Site Message: ' + category.charAt(0).toUpperCase() + category.slice(1);
    wp.hooks.doAction('wpMessageInserterAnalyticsEvent', type, category, action, label, value, nonInteraction);
  }
}

/**
 * Allow our theme or other plugins to send data to the dataLayer object for Google Tag Manager
 *
 * @param {string} messageRegion
 * @param {string} messageId
 */
function dataLayerEvent(messageRegion, messageId) {
  if (typeof wp !== 'undefined') {
    let dataLayerContent = {
      'messageRegion': messageRegion,
      'messageId': messageId
    };
    wp.hooks.doAction('wpMessageInserterDataLayerEvent', dataLayerContent);
  }
}

/**
 * Faux "Session" checking/setting.
 *
 * @return {number} currentCount
 */
function setCurrentCount() {
  // Timestamp stored on the cookie
  let currentCount = getCookie('count');
  const timestamp = Math.floor(new Date().getTime() / 1000);
  const cookieExpiration = 30; // expire the cooke in 30 days
  if (!getCookie('count')) {
    // First Visit - set count to 1
    setCookie('count', 1, cookieExpiration);
    // Set a timecheck cookie for an hour from now
    setCookie('timecheck', timestamp + 3600, cookieExpiration);
  } else if (timestamp > getCookie('timecheck')) {
    // Update Timecheck to new value
    setCookie('timecheck', timestamp + 3600, cookieExpiration);
    // Count exists already and it has been an hour. Update count
    setCookie('count', ++currentCount, cookieExpiration);
  }
  const urlParams = new URLSearchParams(window.location.search);
  if (urlParams.get('count') !== null) {
    currentCount = parseInt(urlParams.get('count'));
  }
  return currentCount;
}

/**
 * Get the WordPress post ID for a given popup.
 *
 * @param {Object} message
 * @return {number} postId
 */
function getPostId(message) {
  let postId = 0;
  message.classList.forEach(function (value) {
    if (0 < value.indexOf('message-id')) {
      postId = value.substring(value.lastIndexOf('-') + 1);
      return postId;
    }
  });
  return postId;
}

/**
 * Get the region for a given message.
 *
 * @param {Object} message
 * @return {string} region
 */
function getMessageRegion(message) {
  let region = '';
  message.classList.forEach(function (value) {
    if (0 < value.indexOf('message-region')) {
      region = value.substring(value.lastIndexOf('-') + 1);
      return region;
    }
  });
  return region;
}

/**
 * Show a specific popup. Sets a cookie and adds a visibility class.
 *
 * @param {Object} popupMessage
 * @param {number} cookieDayTotal
 * @param {string} popupShownCookieName
 * @param {string} popupVisibleClass
 * @param {string} validatedSessionClass
 */
function showPopup(popupMessage, cookieDayTotal, popupShownCookieName, popupVisibleClass, validatedSessionClass) {
  setCookie(popupShownCookieName, 'true', cookieDayTotal);
  const validatedItems = document.querySelectorAll('.' + validatedSessionClass);
  if (0 < validatedItems.length) {
    validatedItems.forEach(function (validatedMessage) {
      validatedMessage.classList.add(popupVisibleClass);
    });
  } else {
    popupMessage.classList.add(popupVisibleClass);
  }
}

/**
 * Show a specific popup. Sets a cookie and adds a visibility class.
 *
 * @param {Object} popupMessage
 * @param {string} popupVisibleClass
 * @param {Object} lastFocus
 * @param {string} closeTrigger
 */
function hidePopup(popupMessage, popupVisibleClass, lastFocus, closeTrigger) {
  lastFocus.focus();
  popupMessage.classList.remove(popupVisibleClass);
  const popupId = getPostId(popupMessage);
  const messageRegion = 'Popup';
  if (0 !== popupId) {
    analyticsTrackingEvent('event', messageRegion, closeTrigger, popupId, undefined, 1);
    dataLayerEvent(messageRegion, popupId);
  }
}

/**
 * Display and controls for popups
 *
 * @param {Object} popupMessage
 * @param {number} cookieDayTotal
 * @param {string} popupShownCookieName
 * @param {string} popupVisibleClass
 * @param {string} checkSessionClass
 * @param {string} validatedSessionClass
 */
function popupDisplay(popupMessage, cookieDayTotal, popupShownCookieName, popupVisibleClass, checkSessionClass, validatedSessionClass) {
  const lastFocus = document.activeElement; // eslint-disable-line
  // Check if we should be showing the popup
  if ('true' !== getCookie(popupShownCookieName) && (!popupMessage.classList.contains(checkSessionClass) || popupMessage.classList.contains(validatedSessionClass))) {
    // actually show the popup
    showPopup(popupMessage, cookieDayTotal, popupShownCookieName, popupVisibleClass, validatedSessionClass);

    // run messageAnalytics on the popup
    messageAnalytics(popupMessage);

    // 1. detect clicks inside the popup that should close it.
    popupMessage.addEventListener('click', function (event) {
      const isCloseButton = event.target.classList.contains('sm-close-btn');
      if (true === isCloseButton) {
        event.preventDefault();
        hidePopup(popupMessage, popupVisibleClass, lastFocus, 'Close Button');
      }
    }, true);

    // 2. detect clicks outside the popup.
    document.addEventListener('click', evt => {
      let targetElement = evt.target;
      do {
        if (targetElement === popupMessage) {
          return;
        }
        // Go up the DOM
        targetElement = targetElement.parentNode;
      } while (targetElement);
      // This is a click outside.
      hidePopup(popupMessage, popupVisibleClass, lastFocus, 'Click Outside to Close');
    });

    // 3. detect escape key press
    document.onkeydown = function (evt) {
      evt = evt || window.event;
      let isEscape = false;
      if ('key' in evt) {
        isEscape = evt.key === 'Escape' || evt.key === 'Esc';
      } else {
        isEscape = evt.keyCode === 27;
      }
      if (isEscape) {
        hidePopup(popupMessage, popupVisibleClass, lastFocus, 'Escape Key');
      }
    };
  } // end of if statement for the conditional to show this popup.
}

/**
 * Set up google analytics events.
 *
 * @param {Object} message
 */
function messageAnalytics(message) {
  const messageRegion = getMessageRegion(message);
  const messageId = getPostId(message);
  const messageDisplay = window.getComputedStyle(message, null).display;
  // tell analytics if a message is being displayed
  if ('none' !== messageDisplay) {
    analyticsTrackingEvent('event', messageRegion, 'Show', messageId, undefined, 1);
    // click tracker for analytics events
    message.addEventListener('click', function (event) {
      // 1. is it a login link or close button?
      // the close event will have already been tracked by the hidePopup method.
      const isLoginClick = event.target.classList.contains('message-login');
      const isCloseButton = event.target.classList.contains('sm-close-btn');
      if (true === isLoginClick) {
        const url = $(this).attr('href');
        analyticsTrackingEvent('event', messageRegion, 'Login Link', url);
        dataLayerEvent(messageRegion, messageId);
      } else if (false === isCloseButton) {
        // 2. other links
        analyticsTrackingEvent('event', messageRegion, 'Click', messageId);
        dataLayerEvent(messageRegion, messageId);
      }
    }, true);
  }
}

/**
 * When the document is loaded, set up session tracking and popup display
 *
 */
document.addEventListener('DOMContentLoaded', function () {
  const popupSelector = 'wp-message-inserter-message-region-popup';
  const popupShownCookieName = 'sm-shown';
  const popupVisibleClass = 'wp-message-inserter-message-popup-visible';
  const checkSessionClass = 'check-session-message';
  const messageSelector = 'wp-message-inserter-message';
  const validatedSessionClass = 'validated';
  const checkSessionItems = document.querySelectorAll('.' + checkSessionClass);
  if (0 < checkSessionItems.length) {
    // get the current count of sessions and set the operators for comparison
    const currentCount = setCurrentCount();
    const operators = {
      gt(a, b) {
        return a >= b;
      },
      lt(a, b) {
        return a <= b;
      }
    };

    // handle messages that are session-dependent
    checkSessionItems.forEach(function (currentSessionMessage) {
      const bannerSessionCount = parseInt(currentSessionMessage.dataset.sessionCountToCheck);
      const bannerSessionOperator = currentSessionMessage.dataset.sessionCountOperator;
      if (operators[bannerSessionOperator](currentCount, bannerSessionCount)) {
        if (currentSessionMessage.classList.contains(popupSelector)) {
          currentSessionMessage.classList.add(validatedSessionClass);
        } else if (!getCookie(popupShownCookieName)) {
          currentSessionMessage.classList.add(validatedSessionClass);
        }
      }
    });
  }
  const popupMessage = document.querySelector('.' + popupSelector);
  if (null !== popupMessage) {
    // get our value for days and hours to set cookie
    const closeTimeDays = parseInt(popupMessage.dataset.closeTimeDays) || 0;
    const closeTimeHours = (parseInt(popupMessage.dataset.closeTimeHours) || 0) / 24;
    // Our Total for when the cookie should expire and show the banner again
    const cookieDayTotal = closeTimeDays + closeTimeHours;
    // determines whether to display a popup
    popupDisplay(popupMessage, cookieDayTotal, popupShownCookieName, popupVisibleClass, checkSessionClass, validatedSessionClass);
  }

  // analytics events for any kind of message that is displayed
  const messageItems = document.querySelectorAll('.' + messageSelector + ':not( .' + popupSelector + ' )');
  if (0 < messageItems.length) {
    messageItems.forEach(function (currentMessage) {
      messageAnalytics(currentMessage);
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjAxLW1lc3NhZ2VzLmpzIl0sIm5hbWVzIjpbInNldENvb2tpZSIsIm5hbWUiLCJ2YWx1ZSIsImRheXMiLCJkIiwiRGF0ZSIsInNldFRpbWUiLCJnZXRUaW1lIiwiZG9jdW1lbnQiLCJjb29raWUiLCJ0b0dNVFN0cmluZyIsImdldENvb2tpZSIsIm1hdGNoIiwiYW5hbHl0aWNzVHJhY2tpbmdFdmVudCIsInR5cGUiLCJjYXRlZ29yeSIsImFjdGlvbiIsImxhYmVsIiwibm9uSW50ZXJhY3Rpb24iLCJ3cCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJob29rcyIsImRvQWN0aW9uIiwiZGF0YUxheWVyRXZlbnQiLCJtZXNzYWdlUmVnaW9uIiwibWVzc2FnZUlkIiwiZGF0YUxheWVyQ29udGVudCIsInNldEN1cnJlbnRDb3VudCIsImN1cnJlbnRDb3VudCIsInRpbWVzdGFtcCIsIk1hdGgiLCJmbG9vciIsImNvb2tpZUV4cGlyYXRpb24iLCJ1cmxQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInNlYXJjaCIsImdldCIsInBhcnNlSW50IiwiZ2V0UG9zdElkIiwibWVzc2FnZSIsInBvc3RJZCIsImNsYXNzTGlzdCIsImZvckVhY2giLCJpbmRleE9mIiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJnZXRNZXNzYWdlUmVnaW9uIiwicmVnaW9uIiwic2hvd1BvcHVwIiwicG9wdXBNZXNzYWdlIiwiY29va2llRGF5VG90YWwiLCJwb3B1cFNob3duQ29va2llTmFtZSIsInBvcHVwVmlzaWJsZUNsYXNzIiwidmFsaWRhdGVkU2Vzc2lvbkNsYXNzIiwidmFsaWRhdGVkSXRlbXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwibGVuZ3RoIiwidmFsaWRhdGVkTWVzc2FnZSIsImFkZCIsImhpZGVQb3B1cCIsImxhc3RGb2N1cyIsImNsb3NlVHJpZ2dlciIsImZvY3VzIiwicmVtb3ZlIiwicG9wdXBJZCIsInVuZGVmaW5lZCIsInBvcHVwRGlzcGxheSIsImNoZWNrU2Vzc2lvbkNsYXNzIiwiYWN0aXZlRWxlbWVudCIsImNvbnRhaW5zIiwibWVzc2FnZUFuYWx5dGljcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsImlzQ2xvc2VCdXR0b24iLCJ0YXJnZXQiLCJwcmV2ZW50RGVmYXVsdCIsImV2dCIsInRhcmdldEVsZW1lbnQiLCJwYXJlbnROb2RlIiwib25rZXlkb3duIiwiaXNFc2NhcGUiLCJrZXkiLCJrZXlDb2RlIiwibWVzc2FnZURpc3BsYXkiLCJnZXRDb21wdXRlZFN0eWxlIiwiZGlzcGxheSIsImlzTG9naW5DbGljayIsInVybCIsIiQiLCJhdHRyIiwicG9wdXBTZWxlY3RvciIsIm1lc3NhZ2VTZWxlY3RvciIsImNoZWNrU2Vzc2lvbkl0ZW1zIiwib3BlcmF0b3JzIiwiZ3QiLCJhIiwiYiIsImx0IiwiY3VycmVudFNlc3Npb25NZXNzYWdlIiwiYmFubmVyU2Vzc2lvbkNvdW50IiwiZGF0YXNldCIsInNlc3Npb25Db3VudFRvQ2hlY2siLCJiYW5uZXJTZXNzaW9uT3BlcmF0b3IiLCJzZXNzaW9uQ291bnRPcGVyYXRvciIsInF1ZXJ5U2VsZWN0b3IiLCJjbG9zZVRpbWVEYXlzIiwiY2xvc2VUaW1lSG91cnMiLCJtZXNzYWdlSXRlbXMiLCJjdXJyZW50TWVzc2FnZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLFNBQVMsQ0FBQ0MsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLElBQUksRUFBRTtFQUNyQyxNQUFNQyxDQUFDLEdBQUcsSUFBSUMsSUFBSSxFQUFFO0VBQ3BCRCxDQUFDLENBQUNFLE9BQU8sQ0FBQ0YsQ0FBQyxDQUFDRyxPQUFPLEVBQUUsR0FBRyxRQUFRLEdBQUdKLElBQUksQ0FBQztFQUN4Q0ssUUFBUSxDQUFDQyxNQUFNLEdBQUdSLElBQUksR0FBRyxHQUFHLEdBQUdDLEtBQUssR0FBRyxrQkFBa0IsR0FBR0UsQ0FBQyxDQUFDTSxXQUFXLEVBQUU7QUFDNUU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLFNBQVMsQ0FBQ1YsSUFBSSxFQUFFO0VBQ3hCLE1BQU1DLEtBQUssR0FBR00sUUFBUSxDQUFDQyxNQUFNLENBQUNHLEtBQUssQ0FBQyxTQUFTLEdBQUdYLElBQUksR0FBRyxlQUFlLENBQUM7RUFDdkUsT0FBT0MsS0FBSyxHQUFHQSxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSTtBQUMvQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNXLHNCQUFzQixDQUM5QkMsSUFBSSxFQUNKQyxRQUFRLEVBQ1JDLE1BQU0sRUFDTkMsS0FBSyxFQUNMZixLQUFLLEVBQ0xnQixjQUFjLEVBQ2I7RUFDRCxJQUFJLE9BQU9DLEVBQUUsS0FBSyxXQUFXLEVBQUU7SUFDOUJKLFFBQVEsR0FDUCxnQkFBZ0IsR0FDaEJBLFFBQVEsQ0FBQ0ssTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDQyxXQUFXLEVBQUUsR0FDaENOLFFBQVEsQ0FBQ08sS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNsQkgsRUFBRSxDQUFDSSxLQUFLLENBQUNDLFFBQVEsQ0FDaEIsaUNBQWlDLEVBQ2pDVixJQUFJLEVBQ0pDLFFBQVEsRUFDUkMsTUFBTSxFQUNOQyxLQUFLLEVBQ0xmLEtBQUssRUFDTGdCLGNBQWMsQ0FDZDtFQUNGO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU08sY0FBYyxDQUFDQyxhQUFhLEVBQUVDLFNBQVMsRUFBRTtFQUNqRCxJQUFJLE9BQU9SLEVBQUUsS0FBSyxXQUFXLEVBQUU7SUFDOUIsSUFBSVMsZ0JBQWdCLEdBQUc7TUFDdEIsZUFBZSxFQUFFRixhQUFhO01BQzlCLFdBQVcsRUFBRUM7SUFDZCxDQUFDO0lBQ0RSLEVBQUUsQ0FBQ0ksS0FBSyxDQUFDQyxRQUFRLENBQUMsaUNBQWlDLEVBQUVJLGdCQUFnQixDQUFDO0VBQ3ZFO0FBQ0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLGVBQWUsR0FBRztFQUMxQjtFQUNBLElBQUlDLFlBQVksR0FBR25CLFNBQVMsQ0FBQyxPQUFPLENBQUM7RUFDckMsTUFBTW9CLFNBQVMsR0FBR0MsSUFBSSxDQUFDQyxLQUFLLENBQUMsSUFBSTVCLElBQUksRUFBRSxDQUFDRSxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUM7RUFDekQsTUFBTTJCLGdCQUFnQixHQUFHLEVBQUUsQ0FBQyxDQUFDO0VBQzdCLElBQUksQ0FBQ3ZCLFNBQVMsQ0FBQyxPQUFPLENBQUMsRUFBRTtJQUN4QjtJQUNBWCxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUMsRUFBRWtDLGdCQUFnQixDQUFDO0lBQ3ZDO0lBQ0FsQyxTQUFTLENBQUMsV0FBVyxFQUFFK0IsU0FBUyxHQUFHLElBQUksRUFBRUcsZ0JBQWdCLENBQUM7RUFDM0QsQ0FBQyxNQUFNLElBQUlILFNBQVMsR0FBR3BCLFNBQVMsQ0FBQyxXQUFXLENBQUMsRUFBRTtJQUM5QztJQUNBWCxTQUFTLENBQUMsV0FBVyxFQUFFK0IsU0FBUyxHQUFHLElBQUksRUFBRUcsZ0JBQWdCLENBQUM7SUFDMUQ7SUFDQWxDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsRUFBRThCLFlBQVksRUFBRUksZ0JBQWdCLENBQUM7RUFDckQ7RUFDQSxNQUFNQyxTQUFTLEdBQUcsSUFBSUMsZUFBZSxDQUFDQyxNQUFNLENBQUNDLFFBQVEsQ0FBQ0MsTUFBTSxDQUFDO0VBQzdELElBQUlKLFNBQVMsQ0FBQ0ssR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLElBQUksRUFBRTtJQUNwQ1YsWUFBWSxHQUFHVyxRQUFRLENBQUNOLFNBQVMsQ0FBQ0ssR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0VBQ2hEO0VBQ0EsT0FBT1YsWUFBWTtBQUNwQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTWSxTQUFTLENBQUNDLE9BQU8sRUFBRTtFQUMzQixJQUFJQyxNQUFNLEdBQUcsQ0FBQztFQUNkRCxPQUFPLENBQUNFLFNBQVMsQ0FBQ0MsT0FBTyxDQUFDLFVBQVU1QyxLQUFLLEVBQUU7SUFDMUMsSUFBSSxDQUFDLEdBQUdBLEtBQUssQ0FBQzZDLE9BQU8sQ0FBQyxZQUFZLENBQUMsRUFBRTtNQUNwQ0gsTUFBTSxHQUFHMUMsS0FBSyxDQUFDOEMsU0FBUyxDQUFDOUMsS0FBSyxDQUFDK0MsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztNQUNwRCxPQUFPTCxNQUFNO0lBQ2Q7RUFDRCxDQUFDLENBQUM7RUFDRixPQUFPQSxNQUFNO0FBQ2Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU00sZ0JBQWdCLENBQUNQLE9BQU8sRUFBRTtFQUNsQyxJQUFJUSxNQUFNLEdBQUcsRUFBRTtFQUNmUixPQUFPLENBQUNFLFNBQVMsQ0FBQ0MsT0FBTyxDQUFDLFVBQVU1QyxLQUFLLEVBQUU7SUFDMUMsSUFBSSxDQUFDLEdBQUdBLEtBQUssQ0FBQzZDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO01BQ3hDSSxNQUFNLEdBQUdqRCxLQUFLLENBQUM4QyxTQUFTLENBQUM5QyxLQUFLLENBQUMrQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO01BQ3BELE9BQU9FLE1BQU07SUFDZDtFQUNELENBQUMsQ0FBQztFQUNGLE9BQU9BLE1BQU07QUFDZDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQyxTQUFTLENBQ2pCQyxZQUFZLEVBQ1pDLGNBQWMsRUFDZEMsb0JBQW9CLEVBQ3BCQyxpQkFBaUIsRUFDakJDLHFCQUFxQixFQUNwQjtFQUNEekQsU0FBUyxDQUFDdUQsb0JBQW9CLEVBQUUsTUFBTSxFQUFFRCxjQUFjLENBQUM7RUFDdkQsTUFBTUksY0FBYyxHQUFHbEQsUUFBUSxDQUFDbUQsZ0JBQWdCLENBQy9DLEdBQUcsR0FBR0YscUJBQXFCLENBQzNCO0VBQ0QsSUFBSSxDQUFDLEdBQUdDLGNBQWMsQ0FBQ0UsTUFBTSxFQUFFO0lBQzlCRixjQUFjLENBQUNaLE9BQU8sQ0FBQyxVQUFVZSxnQkFBZ0IsRUFBRTtNQUNsREEsZ0JBQWdCLENBQUNoQixTQUFTLENBQUNpQixHQUFHLENBQUNOLGlCQUFpQixDQUFDO0lBQ2xELENBQUMsQ0FBQztFQUNILENBQUMsTUFBTTtJQUNOSCxZQUFZLENBQUNSLFNBQVMsQ0FBQ2lCLEdBQUcsQ0FBQ04saUJBQWlCLENBQUM7RUFDOUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU08sU0FBUyxDQUFDVixZQUFZLEVBQUVHLGlCQUFpQixFQUFFUSxTQUFTLEVBQUVDLFlBQVksRUFBRTtFQUM1RUQsU0FBUyxDQUFDRSxLQUFLLEVBQUU7RUFDakJiLFlBQVksQ0FBQ1IsU0FBUyxDQUFDc0IsTUFBTSxDQUFDWCxpQkFBaUIsQ0FBQztFQUNoRCxNQUFNWSxPQUFPLEdBQUcxQixTQUFTLENBQUNXLFlBQVksQ0FBQztFQUN2QyxNQUFNM0IsYUFBYSxHQUFHLE9BQU87RUFDN0IsSUFBSSxDQUFDLEtBQUswQyxPQUFPLEVBQUU7SUFDbEJ2RCxzQkFBc0IsQ0FDckIsT0FBTyxFQUNQYSxhQUFhLEVBQ2J1QyxZQUFZLEVBQ1pHLE9BQU8sRUFDUEMsU0FBUyxFQUNULENBQUMsQ0FDRDtJQUNENUMsY0FBYyxDQUFDQyxhQUFhLEVBQUUwQyxPQUFPLENBQUM7RUFDdkM7QUFDRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNFLFlBQVksQ0FDcEJqQixZQUFZLEVBQ1pDLGNBQWMsRUFDZEMsb0JBQW9CLEVBQ3BCQyxpQkFBaUIsRUFDakJlLGlCQUFpQixFQUNqQmQscUJBQXFCLEVBQ3BCO0VBQ0QsTUFBTU8sU0FBUyxHQUFHeEQsUUFBUSxDQUFDZ0UsYUFBYSxDQUFDLENBQUM7RUFDMUM7RUFDQSxJQUNDLE1BQU0sS0FBSzdELFNBQVMsQ0FBQzRDLG9CQUFvQixDQUFDLEtBQ3pDLENBQUNGLFlBQVksQ0FBQ1IsU0FBUyxDQUFDNEIsUUFBUSxDQUFDRixpQkFBaUIsQ0FBQyxJQUNuRGxCLFlBQVksQ0FBQ1IsU0FBUyxDQUFDNEIsUUFBUSxDQUFDaEIscUJBQXFCLENBQUMsQ0FBQyxFQUN2RDtJQUNEO0lBQ0FMLFNBQVMsQ0FDUkMsWUFBWSxFQUNaQyxjQUFjLEVBQ2RDLG9CQUFvQixFQUNwQkMsaUJBQWlCLEVBQ2pCQyxxQkFBcUIsQ0FDckI7O0lBRUQ7SUFDQWlCLGdCQUFnQixDQUFDckIsWUFBWSxDQUFDOztJQUU5QjtJQUNBQSxZQUFZLENBQUNzQixnQkFBZ0IsQ0FDNUIsT0FBTyxFQUNQLFVBQVVDLEtBQUssRUFBRTtNQUNoQixNQUFNQyxhQUFhLEdBQ2xCRCxLQUFLLENBQUNFLE1BQU0sQ0FBQ2pDLFNBQVMsQ0FBQzRCLFFBQVEsQ0FBQyxjQUFjLENBQUM7TUFDaEQsSUFBSSxJQUFJLEtBQUtJLGFBQWEsRUFBRTtRQUMzQkQsS0FBSyxDQUFDRyxjQUFjLEVBQUU7UUFDdEJoQixTQUFTLENBQ1JWLFlBQVksRUFDWkcsaUJBQWlCLEVBQ2pCUSxTQUFTLEVBQ1QsY0FBYyxDQUNkO01BQ0Y7SUFDRCxDQUFDLEVBQ0QsSUFBSSxDQUNKOztJQUVEO0lBQ0F4RCxRQUFRLENBQUNtRSxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUdLLEdBQUcsSUFBSztNQUMzQyxJQUFJQyxhQUFhLEdBQUdELEdBQUcsQ0FBQ0YsTUFBTTtNQUM5QixHQUFHO1FBQ0YsSUFBSUcsYUFBYSxLQUFLNUIsWUFBWSxFQUFFO1VBQ25DO1FBQ0Q7UUFDQTtRQUNBNEIsYUFBYSxHQUFHQSxhQUFhLENBQUNDLFVBQVU7TUFDekMsQ0FBQyxRQUFRRCxhQUFhO01BQ3RCO01BQ0FsQixTQUFTLENBQ1JWLFlBQVksRUFDWkcsaUJBQWlCLEVBQ2pCUSxTQUFTLEVBQ1Qsd0JBQXdCLENBQ3hCO0lBQ0YsQ0FBQyxDQUFDOztJQUVGO0lBQ0F4RCxRQUFRLENBQUMyRSxTQUFTLEdBQUcsVUFBVUgsR0FBRyxFQUFFO01BQ25DQSxHQUFHLEdBQUdBLEdBQUcsSUFBSTNDLE1BQU0sQ0FBQ3VDLEtBQUs7TUFDekIsSUFBSVEsUUFBUSxHQUFHLEtBQUs7TUFDcEIsSUFBSSxLQUFLLElBQUlKLEdBQUcsRUFBRTtRQUNqQkksUUFBUSxHQUFHSixHQUFHLENBQUNLLEdBQUcsS0FBSyxRQUFRLElBQUlMLEdBQUcsQ0FBQ0ssR0FBRyxLQUFLLEtBQUs7TUFDckQsQ0FBQyxNQUFNO1FBQ05ELFFBQVEsR0FBR0osR0FBRyxDQUFDTSxPQUFPLEtBQUssRUFBRTtNQUM5QjtNQUNBLElBQUlGLFFBQVEsRUFBRTtRQUNickIsU0FBUyxDQUNSVixZQUFZLEVBQ1pHLGlCQUFpQixFQUNqQlEsU0FBUyxFQUNULFlBQVksQ0FDWjtNQUNGO0lBQ0QsQ0FBQztFQUNGLENBQUMsQ0FBQztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTVSxnQkFBZ0IsQ0FBQy9CLE9BQU8sRUFBRTtFQUNsQyxNQUFNakIsYUFBYSxHQUFHd0IsZ0JBQWdCLENBQUNQLE9BQU8sQ0FBQztFQUMvQyxNQUFNaEIsU0FBUyxHQUFHZSxTQUFTLENBQUNDLE9BQU8sQ0FBQztFQUNwQyxNQUFNNEMsY0FBYyxHQUFHbEQsTUFBTSxDQUFDbUQsZ0JBQWdCLENBQUM3QyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM4QyxPQUFPO0VBQ3JFO0VBQ0EsSUFBSSxNQUFNLEtBQUtGLGNBQWMsRUFBRTtJQUM5QjFFLHNCQUFzQixDQUNyQixPQUFPLEVBQ1BhLGFBQWEsRUFDYixNQUFNLEVBQ05DLFNBQVMsRUFDVDBDLFNBQVMsRUFDVCxDQUFDLENBQ0Q7SUFDRDtJQUNBMUIsT0FBTyxDQUFDZ0MsZ0JBQWdCLENBQ3ZCLE9BQU8sRUFDUCxVQUFVQyxLQUFLLEVBQUU7TUFDaEI7TUFDQTtNQUNBLE1BQU1jLFlBQVksR0FDakJkLEtBQUssQ0FBQ0UsTUFBTSxDQUFDakMsU0FBUyxDQUFDNEIsUUFBUSxDQUFDLGVBQWUsQ0FBQztNQUNqRCxNQUFNSSxhQUFhLEdBQ2xCRCxLQUFLLENBQUNFLE1BQU0sQ0FBQ2pDLFNBQVMsQ0FBQzRCLFFBQVEsQ0FBQyxjQUFjLENBQUM7TUFDaEQsSUFBSSxJQUFJLEtBQUtpQixZQUFZLEVBQUU7UUFDMUIsTUFBTUMsR0FBRyxHQUFHQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUNDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDaENoRixzQkFBc0IsQ0FDckIsT0FBTyxFQUNQYSxhQUFhLEVBQ2IsWUFBWSxFQUNaaUUsR0FBRyxDQUNIO1FBQ0RsRSxjQUFjLENBQUNDLGFBQWEsRUFBRUMsU0FBUyxDQUFDO01BQ3pDLENBQUMsTUFBTSxJQUFJLEtBQUssS0FBS2tELGFBQWEsRUFBRTtRQUNuQztRQUNBaEUsc0JBQXNCLENBQ3JCLE9BQU8sRUFDUGEsYUFBYSxFQUNiLE9BQU8sRUFDUEMsU0FBUyxDQUNUO1FBQ0RGLGNBQWMsQ0FBQ0MsYUFBYSxFQUFFQyxTQUFTLENBQUM7TUFDekM7SUFDRCxDQUFDLEVBQ0QsSUFBSSxDQUNKO0VBQ0Y7QUFDRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBbkIsUUFBUSxDQUFDbUUsZ0JBQWdCLENBQUMsa0JBQWtCLEVBQUUsWUFBWTtFQUN6RCxNQUFNbUIsYUFBYSxHQUFHLDBDQUEwQztFQUNoRSxNQUFNdkMsb0JBQW9CLEdBQUcsVUFBVTtFQUN2QyxNQUFNQyxpQkFBaUIsR0FBRywyQ0FBMkM7RUFDckUsTUFBTWUsaUJBQWlCLEdBQUcsdUJBQXVCO0VBQ2pELE1BQU13QixlQUFlLEdBQUcsNkJBQTZCO0VBQ3JELE1BQU10QyxxQkFBcUIsR0FBRyxXQUFXO0VBQ3pDLE1BQU11QyxpQkFBaUIsR0FBR3hGLFFBQVEsQ0FBQ21ELGdCQUFnQixDQUNsRCxHQUFHLEdBQUdZLGlCQUFpQixDQUN2QjtFQUNELElBQUksQ0FBQyxHQUFHeUIsaUJBQWlCLENBQUNwQyxNQUFNLEVBQUU7SUFDakM7SUFDQSxNQUFNOUIsWUFBWSxHQUFHRCxlQUFlLEVBQUU7SUFDdEMsTUFBTW9FLFNBQVMsR0FBRztNQUNqQkMsRUFBRSxDQUFDQyxDQUFDLEVBQUVDLENBQUMsRUFBRTtRQUNSLE9BQU9ELENBQUMsSUFBSUMsQ0FBQztNQUNkLENBQUM7TUFDREMsRUFBRSxDQUFDRixDQUFDLEVBQUVDLENBQUMsRUFBRTtRQUNSLE9BQU9ELENBQUMsSUFBSUMsQ0FBQztNQUNkO0lBQ0QsQ0FBQzs7SUFFRDtJQUNBSixpQkFBaUIsQ0FBQ2xELE9BQU8sQ0FBQyxVQUFVd0QscUJBQXFCLEVBQUU7TUFDMUQsTUFBTUMsa0JBQWtCLEdBQUc5RCxRQUFRLENBQ2xDNkQscUJBQXFCLENBQUNFLE9BQU8sQ0FBQ0MsbUJBQW1CLENBQ2pEO01BQ0QsTUFBTUMscUJBQXFCLEdBQzFCSixxQkFBcUIsQ0FBQ0UsT0FBTyxDQUFDRyxvQkFBb0I7TUFDbkQsSUFDQ1YsU0FBUyxDQUFDUyxxQkFBcUIsQ0FBQyxDQUMvQjVFLFlBQVksRUFDWnlFLGtCQUFrQixDQUNsQixFQUNBO1FBQ0QsSUFBSUQscUJBQXFCLENBQUN6RCxTQUFTLENBQUM0QixRQUFRLENBQUNxQixhQUFhLENBQUMsRUFBRTtVQUM1RFEscUJBQXFCLENBQUN6RCxTQUFTLENBQUNpQixHQUFHLENBQUNMLHFCQUFxQixDQUFDO1FBQzNELENBQUMsTUFBTSxJQUFJLENBQUM5QyxTQUFTLENBQUM0QyxvQkFBb0IsQ0FBQyxFQUFFO1VBQzVDK0MscUJBQXFCLENBQUN6RCxTQUFTLENBQUNpQixHQUFHLENBQUNMLHFCQUFxQixDQUFDO1FBQzNEO01BQ0Q7SUFDRCxDQUFDLENBQUM7RUFDSDtFQUVBLE1BQU1KLFlBQVksR0FBRzdDLFFBQVEsQ0FBQ29HLGFBQWEsQ0FBQyxHQUFHLEdBQUdkLGFBQWEsQ0FBQztFQUNoRSxJQUFJLElBQUksS0FBS3pDLFlBQVksRUFBRTtJQUMxQjtJQUNBLE1BQU13RCxhQUFhLEdBQUdwRSxRQUFRLENBQUNZLFlBQVksQ0FBQ21ELE9BQU8sQ0FBQ0ssYUFBYSxDQUFDLElBQUksQ0FBQztJQUN2RSxNQUFNQyxjQUFjLEdBQ25CLENBQUNyRSxRQUFRLENBQUNZLFlBQVksQ0FBQ21ELE9BQU8sQ0FBQ00sY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7SUFDMUQ7SUFDQSxNQUFNeEQsY0FBYyxHQUFHdUQsYUFBYSxHQUFHQyxjQUFjO0lBQ3JEO0lBQ0F4QyxZQUFZLENBQ1hqQixZQUFZLEVBQ1pDLGNBQWMsRUFDZEMsb0JBQW9CLEVBQ3BCQyxpQkFBaUIsRUFDakJlLGlCQUFpQixFQUNqQmQscUJBQXFCLENBQ3JCO0VBQ0Y7O0VBRUE7RUFDQSxNQUFNc0QsWUFBWSxHQUFHdkcsUUFBUSxDQUFDbUQsZ0JBQWdCLENBQzdDLEdBQUcsR0FBR29DLGVBQWUsR0FBRyxTQUFTLEdBQUdELGFBQWEsR0FBRyxJQUFJLENBQ3hEO0VBQ0QsSUFBSSxDQUFDLEdBQUdpQixZQUFZLENBQUNuRCxNQUFNLEVBQUU7SUFDNUJtRCxZQUFZLENBQUNqRSxPQUFPLENBQUMsVUFBVWtFLGNBQWMsRUFBRTtNQUM5Q3RDLGdCQUFnQixDQUFDc0MsY0FBYyxDQUFDO0lBQ2pDLENBQUMsQ0FBQztFQUNIO0FBQ0QsQ0FBQyxDQUFDIiwiZmlsZSI6IndwLW1lc3NhZ2UtaW5zZXJ0ZXItcGx1Z2luLWZyb250LWVuZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU2V0cyBjb29raWVzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXJ9IGRheXNcbiAqL1xuZnVuY3Rpb24gc2V0Q29va2llKG5hbWUsIHZhbHVlLCBkYXlzKSB7XG5cdGNvbnN0IGQgPSBuZXcgRGF0ZSgpO1xuXHRkLnNldFRpbWUoZC5nZXRUaW1lKCkgKyA4NjQwMDAwMCAqIGRheXMpO1xuXHRkb2N1bWVudC5jb29raWUgPSBuYW1lICsgJz0nICsgdmFsdWUgKyAnO3BhdGg9LztleHBpcmVzPScgKyBkLnRvR01UU3RyaW5nKCk7XG59XG5cbi8qKlxuICogUmVhZHMgY29va2llc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKi9cbmZ1bmN0aW9uIGdldENvb2tpZShuYW1lKSB7XG5cdGNvbnN0IHZhbHVlID0gZG9jdW1lbnQuY29va2llLm1hdGNoKCcoXnw7KSA/JyArIG5hbWUgKyAnPShbXjtdKikoO3wkKScpO1xuXHRyZXR1cm4gdmFsdWUgPyB2YWx1ZVsyXSA6IG51bGw7XG59XG5cbi8qKlxuICogQWxsb3cgb3VyIHRoZW1lIG9yIG90aGVyIHBsdWdpbnMgdG8gY3JlYXRlIGFuYWx5dGljcyB0cmFja2luZyBldmVudHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gIHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfSAgY2F0ZWdvcnlcbiAqIEBwYXJhbSB7c3RyaW5nfSAgYWN0aW9uXG4gKiBAcGFyYW0ge3N0cmluZ30gIGxhYmVsXG4gKiBAcGFyYW0ge0FycmF5fSAgIHZhbHVlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG5vbkludGVyYWN0aW9uXG4gKi9cbmZ1bmN0aW9uIGFuYWx5dGljc1RyYWNraW5nRXZlbnQoXG5cdHR5cGUsXG5cdGNhdGVnb3J5LFxuXHRhY3Rpb24sXG5cdGxhYmVsLFxuXHR2YWx1ZSxcblx0bm9uSW50ZXJhY3Rpb25cbikge1xuXHRpZiAodHlwZW9mIHdwICE9PSAndW5kZWZpbmVkJykge1xuXHRcdGNhdGVnb3J5ID1cblx0XHRcdCdTaXRlIE1lc3NhZ2U6ICcgK1xuXHRcdFx0Y2F0ZWdvcnkuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgK1xuXHRcdFx0Y2F0ZWdvcnkuc2xpY2UoMSk7XG5cdFx0d3AuaG9va3MuZG9BY3Rpb24oXG5cdFx0XHQnd3BNZXNzYWdlSW5zZXJ0ZXJBbmFseXRpY3NFdmVudCcsXG5cdFx0XHR0eXBlLFxuXHRcdFx0Y2F0ZWdvcnksXG5cdFx0XHRhY3Rpb24sXG5cdFx0XHRsYWJlbCxcblx0XHRcdHZhbHVlLFxuXHRcdFx0bm9uSW50ZXJhY3Rpb25cblx0XHQpO1xuXHR9XG59XG5cbi8qKlxuICogQWxsb3cgb3VyIHRoZW1lIG9yIG90aGVyIHBsdWdpbnMgdG8gc2VuZCBkYXRhIHRvIHRoZSBkYXRhTGF5ZXIgb2JqZWN0IGZvciBHb29nbGUgVGFnIE1hbmFnZXJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVJlZ2lvblxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2VJZFxuICovXG5mdW5jdGlvbiBkYXRhTGF5ZXJFdmVudChtZXNzYWdlUmVnaW9uLCBtZXNzYWdlSWQpIHtcblx0aWYgKHR5cGVvZiB3cCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRsZXQgZGF0YUxheWVyQ29udGVudCA9IHtcblx0XHRcdCdtZXNzYWdlUmVnaW9uJzogbWVzc2FnZVJlZ2lvbixcblx0XHRcdCdtZXNzYWdlSWQnOiBtZXNzYWdlSWRcblx0XHR9O1xuXHRcdHdwLmhvb2tzLmRvQWN0aW9uKCd3cE1lc3NhZ2VJbnNlcnRlckRhdGFMYXllckV2ZW50JywgZGF0YUxheWVyQ29udGVudCk7XG5cdH1cbn1cblxuLyoqXG4gKiBGYXV4IFwiU2Vzc2lvblwiIGNoZWNraW5nL3NldHRpbmcuXG4gKlxuICogQHJldHVybiB7bnVtYmVyfSBjdXJyZW50Q291bnRcbiAqL1xuZnVuY3Rpb24gc2V0Q3VycmVudENvdW50KCkge1xuXHQvLyBUaW1lc3RhbXAgc3RvcmVkIG9uIHRoZSBjb29raWVcblx0bGV0IGN1cnJlbnRDb3VudCA9IGdldENvb2tpZSgnY291bnQnKTtcblx0Y29uc3QgdGltZXN0YW1wID0gTWF0aC5mbG9vcihuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDApO1xuXHRjb25zdCBjb29raWVFeHBpcmF0aW9uID0gMzA7IC8vIGV4cGlyZSB0aGUgY29va2UgaW4gMzAgZGF5c1xuXHRpZiAoIWdldENvb2tpZSgnY291bnQnKSkge1xuXHRcdC8vIEZpcnN0IFZpc2l0IC0gc2V0IGNvdW50IHRvIDFcblx0XHRzZXRDb29raWUoJ2NvdW50JywgMSwgY29va2llRXhwaXJhdGlvbik7XG5cdFx0Ly8gU2V0IGEgdGltZWNoZWNrIGNvb2tpZSBmb3IgYW4gaG91ciBmcm9tIG5vd1xuXHRcdHNldENvb2tpZSgndGltZWNoZWNrJywgdGltZXN0YW1wICsgMzYwMCwgY29va2llRXhwaXJhdGlvbik7XG5cdH0gZWxzZSBpZiAodGltZXN0YW1wID4gZ2V0Q29va2llKCd0aW1lY2hlY2snKSkge1xuXHRcdC8vIFVwZGF0ZSBUaW1lY2hlY2sgdG8gbmV3IHZhbHVlXG5cdFx0c2V0Q29va2llKCd0aW1lY2hlY2snLCB0aW1lc3RhbXAgKyAzNjAwLCBjb29raWVFeHBpcmF0aW9uKTtcblx0XHQvLyBDb3VudCBleGlzdHMgYWxyZWFkeSBhbmQgaXQgaGFzIGJlZW4gYW4gaG91ci4gVXBkYXRlIGNvdW50XG5cdFx0c2V0Q29va2llKCdjb3VudCcsICsrY3VycmVudENvdW50LCBjb29raWVFeHBpcmF0aW9uKTtcblx0fVxuXHRjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xuXHRpZiAodXJsUGFyYW1zLmdldCgnY291bnQnKSAhPT0gbnVsbCkge1xuXHRcdGN1cnJlbnRDb3VudCA9IHBhcnNlSW50KHVybFBhcmFtcy5nZXQoJ2NvdW50JykpO1xuXHR9XG5cdHJldHVybiBjdXJyZW50Q291bnQ7XG59XG5cbi8qKlxuICogR2V0IHRoZSBXb3JkUHJlc3MgcG9zdCBJRCBmb3IgYSBnaXZlbiBwb3B1cC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbWVzc2FnZVxuICogQHJldHVybiB7bnVtYmVyfSBwb3N0SWRcbiAqL1xuZnVuY3Rpb24gZ2V0UG9zdElkKG1lc3NhZ2UpIHtcblx0bGV0IHBvc3RJZCA9IDA7XG5cdG1lc3NhZ2UuY2xhc3NMaXN0LmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG5cdFx0aWYgKDAgPCB2YWx1ZS5pbmRleE9mKCdtZXNzYWdlLWlkJykpIHtcblx0XHRcdHBvc3RJZCA9IHZhbHVlLnN1YnN0cmluZyh2YWx1ZS5sYXN0SW5kZXhPZignLScpICsgMSk7XG5cdFx0XHRyZXR1cm4gcG9zdElkO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb3N0SWQ7XG59XG5cbi8qKlxuICogR2V0IHRoZSByZWdpb24gZm9yIGEgZ2l2ZW4gbWVzc2FnZS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbWVzc2FnZVxuICogQHJldHVybiB7c3RyaW5nfSByZWdpb25cbiAqL1xuZnVuY3Rpb24gZ2V0TWVzc2FnZVJlZ2lvbihtZXNzYWdlKSB7XG5cdGxldCByZWdpb24gPSAnJztcblx0bWVzc2FnZS5jbGFzc0xpc3QuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRpZiAoMCA8IHZhbHVlLmluZGV4T2YoJ21lc3NhZ2UtcmVnaW9uJykpIHtcblx0XHRcdHJlZ2lvbiA9IHZhbHVlLnN1YnN0cmluZyh2YWx1ZS5sYXN0SW5kZXhPZignLScpICsgMSk7XG5cdFx0XHRyZXR1cm4gcmVnaW9uO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiByZWdpb247XG59XG5cbi8qKlxuICogU2hvdyBhIHNwZWNpZmljIHBvcHVwLiBTZXRzIGEgY29va2llIGFuZCBhZGRzIGEgdmlzaWJpbGl0eSBjbGFzcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gcG9wdXBNZXNzYWdlXG4gKiBAcGFyYW0ge251bWJlcn0gY29va2llRGF5VG90YWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBwb3B1cFNob3duQ29va2llTmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IHBvcHVwVmlzaWJsZUNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsaWRhdGVkU2Vzc2lvbkNsYXNzXG4gKi9cbmZ1bmN0aW9uIHNob3dQb3B1cChcblx0cG9wdXBNZXNzYWdlLFxuXHRjb29raWVEYXlUb3RhbCxcblx0cG9wdXBTaG93bkNvb2tpZU5hbWUsXG5cdHBvcHVwVmlzaWJsZUNsYXNzLFxuXHR2YWxpZGF0ZWRTZXNzaW9uQ2xhc3Ncbikge1xuXHRzZXRDb29raWUocG9wdXBTaG93bkNvb2tpZU5hbWUsICd0cnVlJywgY29va2llRGF5VG90YWwpO1xuXHRjb25zdCB2YWxpZGF0ZWRJdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXG5cdFx0Jy4nICsgdmFsaWRhdGVkU2Vzc2lvbkNsYXNzXG5cdCk7XG5cdGlmICgwIDwgdmFsaWRhdGVkSXRlbXMubGVuZ3RoKSB7XG5cdFx0dmFsaWRhdGVkSXRlbXMuZm9yRWFjaChmdW5jdGlvbiAodmFsaWRhdGVkTWVzc2FnZSkge1xuXHRcdFx0dmFsaWRhdGVkTWVzc2FnZS5jbGFzc0xpc3QuYWRkKHBvcHVwVmlzaWJsZUNsYXNzKTtcblx0XHR9KTtcblx0fSBlbHNlIHtcblx0XHRwb3B1cE1lc3NhZ2UuY2xhc3NMaXN0LmFkZChwb3B1cFZpc2libGVDbGFzcyk7XG5cdH1cbn1cblxuLyoqXG4gKiBTaG93IGEgc3BlY2lmaWMgcG9wdXAuIFNldHMgYSBjb29raWUgYW5kIGFkZHMgYSB2aXNpYmlsaXR5IGNsYXNzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwb3B1cE1lc3NhZ2VcbiAqIEBwYXJhbSB7c3RyaW5nfSBwb3B1cFZpc2libGVDbGFzc1xuICogQHBhcmFtIHtPYmplY3R9IGxhc3RGb2N1c1xuICogQHBhcmFtIHtzdHJpbmd9IGNsb3NlVHJpZ2dlclxuICovXG5mdW5jdGlvbiBoaWRlUG9wdXAocG9wdXBNZXNzYWdlLCBwb3B1cFZpc2libGVDbGFzcywgbGFzdEZvY3VzLCBjbG9zZVRyaWdnZXIpIHtcblx0bGFzdEZvY3VzLmZvY3VzKCk7XG5cdHBvcHVwTWVzc2FnZS5jbGFzc0xpc3QucmVtb3ZlKHBvcHVwVmlzaWJsZUNsYXNzKTtcblx0Y29uc3QgcG9wdXBJZCA9IGdldFBvc3RJZChwb3B1cE1lc3NhZ2UpO1xuXHRjb25zdCBtZXNzYWdlUmVnaW9uID0gJ1BvcHVwJztcblx0aWYgKDAgIT09IHBvcHVwSWQpIHtcblx0XHRhbmFseXRpY3NUcmFja2luZ0V2ZW50KFxuXHRcdFx0J2V2ZW50Jyxcblx0XHRcdG1lc3NhZ2VSZWdpb24sXG5cdFx0XHRjbG9zZVRyaWdnZXIsXG5cdFx0XHRwb3B1cElkLFxuXHRcdFx0dW5kZWZpbmVkLFxuXHRcdFx0MVxuXHRcdCk7XG5cdFx0ZGF0YUxheWVyRXZlbnQobWVzc2FnZVJlZ2lvbiwgcG9wdXBJZCk7XG5cdH1cbn1cblxuLyoqXG4gKiBEaXNwbGF5IGFuZCBjb250cm9scyBmb3IgcG9wdXBzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBvcHVwTWVzc2FnZVxuICogQHBhcmFtIHtudW1iZXJ9IGNvb2tpZURheVRvdGFsXG4gKiBAcGFyYW0ge3N0cmluZ30gcG9wdXBTaG93bkNvb2tpZU5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwb3B1cFZpc2libGVDbGFzc1xuICogQHBhcmFtIHtzdHJpbmd9IGNoZWNrU2Vzc2lvbkNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsaWRhdGVkU2Vzc2lvbkNsYXNzXG4gKi9cbmZ1bmN0aW9uIHBvcHVwRGlzcGxheShcblx0cG9wdXBNZXNzYWdlLFxuXHRjb29raWVEYXlUb3RhbCxcblx0cG9wdXBTaG93bkNvb2tpZU5hbWUsXG5cdHBvcHVwVmlzaWJsZUNsYXNzLFxuXHRjaGVja1Nlc3Npb25DbGFzcyxcblx0dmFsaWRhdGVkU2Vzc2lvbkNsYXNzXG4pIHtcblx0Y29uc3QgbGFzdEZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXHQvLyBDaGVjayBpZiB3ZSBzaG91bGQgYmUgc2hvd2luZyB0aGUgcG9wdXBcblx0aWYgKFxuXHRcdCd0cnVlJyAhPT0gZ2V0Q29va2llKHBvcHVwU2hvd25Db29raWVOYW1lKSAmJlxuXHRcdCghcG9wdXBNZXNzYWdlLmNsYXNzTGlzdC5jb250YWlucyhjaGVja1Nlc3Npb25DbGFzcykgfHxcblx0XHRcdHBvcHVwTWVzc2FnZS5jbGFzc0xpc3QuY29udGFpbnModmFsaWRhdGVkU2Vzc2lvbkNsYXNzKSlcblx0KSB7XG5cdFx0Ly8gYWN0dWFsbHkgc2hvdyB0aGUgcG9wdXBcblx0XHRzaG93UG9wdXAoXG5cdFx0XHRwb3B1cE1lc3NhZ2UsXG5cdFx0XHRjb29raWVEYXlUb3RhbCxcblx0XHRcdHBvcHVwU2hvd25Db29raWVOYW1lLFxuXHRcdFx0cG9wdXBWaXNpYmxlQ2xhc3MsXG5cdFx0XHR2YWxpZGF0ZWRTZXNzaW9uQ2xhc3Ncblx0XHQpO1xuXG5cdFx0Ly8gcnVuIG1lc3NhZ2VBbmFseXRpY3Mgb24gdGhlIHBvcHVwXG5cdFx0bWVzc2FnZUFuYWx5dGljcyhwb3B1cE1lc3NhZ2UpO1xuXG5cdFx0Ly8gMS4gZGV0ZWN0IGNsaWNrcyBpbnNpZGUgdGhlIHBvcHVwIHRoYXQgc2hvdWxkIGNsb3NlIGl0LlxuXHRcdHBvcHVwTWVzc2FnZS5hZGRFdmVudExpc3RlbmVyKFxuXHRcdFx0J2NsaWNrJyxcblx0XHRcdGZ1bmN0aW9uIChldmVudCkge1xuXHRcdFx0XHRjb25zdCBpc0Nsb3NlQnV0dG9uID1cblx0XHRcdFx0XHRldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdzbS1jbG9zZS1idG4nKTtcblx0XHRcdFx0aWYgKHRydWUgPT09IGlzQ2xvc2VCdXR0b24pIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdGhpZGVQb3B1cChcblx0XHRcdFx0XHRcdHBvcHVwTWVzc2FnZSxcblx0XHRcdFx0XHRcdHBvcHVwVmlzaWJsZUNsYXNzLFxuXHRcdFx0XHRcdFx0bGFzdEZvY3VzLFxuXHRcdFx0XHRcdFx0J0Nsb3NlIEJ1dHRvbidcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0dHJ1ZVxuXHRcdCk7XG5cblx0XHQvLyAyLiBkZXRlY3QgY2xpY2tzIG91dHNpZGUgdGhlIHBvcHVwLlxuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2dCkgPT4ge1xuXHRcdFx0bGV0IHRhcmdldEVsZW1lbnQgPSBldnQudGFyZ2V0O1xuXHRcdFx0ZG8ge1xuXHRcdFx0XHRpZiAodGFyZ2V0RWxlbWVudCA9PT0gcG9wdXBNZXNzYWdlKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIEdvIHVwIHRoZSBET01cblx0XHRcdFx0dGFyZ2V0RWxlbWVudCA9IHRhcmdldEVsZW1lbnQucGFyZW50Tm9kZTtcblx0XHRcdH0gd2hpbGUgKHRhcmdldEVsZW1lbnQpO1xuXHRcdFx0Ly8gVGhpcyBpcyBhIGNsaWNrIG91dHNpZGUuXG5cdFx0XHRoaWRlUG9wdXAoXG5cdFx0XHRcdHBvcHVwTWVzc2FnZSxcblx0XHRcdFx0cG9wdXBWaXNpYmxlQ2xhc3MsXG5cdFx0XHRcdGxhc3RGb2N1cyxcblx0XHRcdFx0J0NsaWNrIE91dHNpZGUgdG8gQ2xvc2UnXG5cdFx0XHQpO1xuXHRcdH0pO1xuXG5cdFx0Ly8gMy4gZGV0ZWN0IGVzY2FwZSBrZXkgcHJlc3Ncblx0XHRkb2N1bWVudC5vbmtleWRvd24gPSBmdW5jdGlvbiAoZXZ0KSB7XG5cdFx0XHRldnQgPSBldnQgfHwgd2luZG93LmV2ZW50O1xuXHRcdFx0bGV0IGlzRXNjYXBlID0gZmFsc2U7XG5cdFx0XHRpZiAoJ2tleScgaW4gZXZ0KSB7XG5cdFx0XHRcdGlzRXNjYXBlID0gZXZ0LmtleSA9PT0gJ0VzY2FwZScgfHwgZXZ0LmtleSA9PT0gJ0VzYyc7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpc0VzY2FwZSA9IGV2dC5rZXlDb2RlID09PSAyNztcblx0XHRcdH1cblx0XHRcdGlmIChpc0VzY2FwZSkge1xuXHRcdFx0XHRoaWRlUG9wdXAoXG5cdFx0XHRcdFx0cG9wdXBNZXNzYWdlLFxuXHRcdFx0XHRcdHBvcHVwVmlzaWJsZUNsYXNzLFxuXHRcdFx0XHRcdGxhc3RGb2N1cyxcblx0XHRcdFx0XHQnRXNjYXBlIEtleSdcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IC8vIGVuZCBvZiBpZiBzdGF0ZW1lbnQgZm9yIHRoZSBjb25kaXRpb25hbCB0byBzaG93IHRoaXMgcG9wdXAuXG59XG5cbi8qKlxuICogU2V0IHVwIGdvb2dsZSBhbmFseXRpY3MgZXZlbnRzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBtZXNzYWdlXG4gKi9cbmZ1bmN0aW9uIG1lc3NhZ2VBbmFseXRpY3MobWVzc2FnZSkge1xuXHRjb25zdCBtZXNzYWdlUmVnaW9uID0gZ2V0TWVzc2FnZVJlZ2lvbihtZXNzYWdlKTtcblx0Y29uc3QgbWVzc2FnZUlkID0gZ2V0UG9zdElkKG1lc3NhZ2UpO1xuXHRjb25zdCBtZXNzYWdlRGlzcGxheSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG1lc3NhZ2UsIG51bGwpLmRpc3BsYXk7XG5cdC8vIHRlbGwgYW5hbHl0aWNzIGlmIGEgbWVzc2FnZSBpcyBiZWluZyBkaXNwbGF5ZWRcblx0aWYgKCdub25lJyAhPT0gbWVzc2FnZURpc3BsYXkpIHtcblx0XHRhbmFseXRpY3NUcmFja2luZ0V2ZW50KFxuXHRcdFx0J2V2ZW50Jyxcblx0XHRcdG1lc3NhZ2VSZWdpb24sXG5cdFx0XHQnU2hvdycsXG5cdFx0XHRtZXNzYWdlSWQsXG5cdFx0XHR1bmRlZmluZWQsXG5cdFx0XHQxXG5cdFx0KTtcblx0XHQvLyBjbGljayB0cmFja2VyIGZvciBhbmFseXRpY3MgZXZlbnRzXG5cdFx0bWVzc2FnZS5hZGRFdmVudExpc3RlbmVyKFxuXHRcdFx0J2NsaWNrJyxcblx0XHRcdGZ1bmN0aW9uIChldmVudCkge1xuXHRcdFx0XHQvLyAxLiBpcyBpdCBhIGxvZ2luIGxpbmsgb3IgY2xvc2UgYnV0dG9uP1xuXHRcdFx0XHQvLyB0aGUgY2xvc2UgZXZlbnQgd2lsbCBoYXZlIGFscmVhZHkgYmVlbiB0cmFja2VkIGJ5IHRoZSBoaWRlUG9wdXAgbWV0aG9kLlxuXHRcdFx0XHRjb25zdCBpc0xvZ2luQ2xpY2sgPVxuXHRcdFx0XHRcdGV2ZW50LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ21lc3NhZ2UtbG9naW4nKTtcblx0XHRcdFx0Y29uc3QgaXNDbG9zZUJ1dHRvbiA9XG5cdFx0XHRcdFx0ZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnc20tY2xvc2UtYnRuJyk7XG5cdFx0XHRcdGlmICh0cnVlID09PSBpc0xvZ2luQ2xpY2spIHtcblx0XHRcdFx0XHRjb25zdCB1cmwgPSAkKHRoaXMpLmF0dHIoJ2hyZWYnKTtcblx0XHRcdFx0XHRhbmFseXRpY3NUcmFja2luZ0V2ZW50KFxuXHRcdFx0XHRcdFx0J2V2ZW50Jyxcblx0XHRcdFx0XHRcdG1lc3NhZ2VSZWdpb24sXG5cdFx0XHRcdFx0XHQnTG9naW4gTGluaycsXG5cdFx0XHRcdFx0XHR1cmxcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGRhdGFMYXllckV2ZW50KG1lc3NhZ2VSZWdpb24sIG1lc3NhZ2VJZCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZmFsc2UgPT09IGlzQ2xvc2VCdXR0b24pIHtcblx0XHRcdFx0XHQvLyAyLiBvdGhlciBsaW5rc1xuXHRcdFx0XHRcdGFuYWx5dGljc1RyYWNraW5nRXZlbnQoXG5cdFx0XHRcdFx0XHQnZXZlbnQnLFxuXHRcdFx0XHRcdFx0bWVzc2FnZVJlZ2lvbixcblx0XHRcdFx0XHRcdCdDbGljaycsXG5cdFx0XHRcdFx0XHRtZXNzYWdlSWRcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGRhdGFMYXllckV2ZW50KG1lc3NhZ2VSZWdpb24sIG1lc3NhZ2VJZCk7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHR0cnVlXG5cdFx0KTtcblx0fVxufVxuXG4vKipcbiAqIFdoZW4gdGhlIGRvY3VtZW50IGlzIGxvYWRlZCwgc2V0IHVwIHNlc3Npb24gdHJhY2tpbmcgYW5kIHBvcHVwIGRpc3BsYXlcbiAqXG4gKi9cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XG5cdGNvbnN0IHBvcHVwU2VsZWN0b3IgPSAnd3AtbWVzc2FnZS1pbnNlcnRlci1tZXNzYWdlLXJlZ2lvbi1wb3B1cCc7XG5cdGNvbnN0IHBvcHVwU2hvd25Db29raWVOYW1lID0gJ3NtLXNob3duJztcblx0Y29uc3QgcG9wdXBWaXNpYmxlQ2xhc3MgPSAnd3AtbWVzc2FnZS1pbnNlcnRlci1tZXNzYWdlLXBvcHVwLXZpc2libGUnO1xuXHRjb25zdCBjaGVja1Nlc3Npb25DbGFzcyA9ICdjaGVjay1zZXNzaW9uLW1lc3NhZ2UnO1xuXHRjb25zdCBtZXNzYWdlU2VsZWN0b3IgPSAnd3AtbWVzc2FnZS1pbnNlcnRlci1tZXNzYWdlJztcblx0Y29uc3QgdmFsaWRhdGVkU2Vzc2lvbkNsYXNzID0gJ3ZhbGlkYXRlZCc7XG5cdGNvbnN0IGNoZWNrU2Vzc2lvbkl0ZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcblx0XHQnLicgKyBjaGVja1Nlc3Npb25DbGFzc1xuXHQpO1xuXHRpZiAoMCA8IGNoZWNrU2Vzc2lvbkl0ZW1zLmxlbmd0aCkge1xuXHRcdC8vIGdldCB0aGUgY3VycmVudCBjb3VudCBvZiBzZXNzaW9ucyBhbmQgc2V0IHRoZSBvcGVyYXRvcnMgZm9yIGNvbXBhcmlzb25cblx0XHRjb25zdCBjdXJyZW50Q291bnQgPSBzZXRDdXJyZW50Q291bnQoKTtcblx0XHRjb25zdCBvcGVyYXRvcnMgPSB7XG5cdFx0XHRndChhLCBiKSB7XG5cdFx0XHRcdHJldHVybiBhID49IGI7XG5cdFx0XHR9LFxuXHRcdFx0bHQoYSwgYikge1xuXHRcdFx0XHRyZXR1cm4gYSA8PSBiO1xuXHRcdFx0fSxcblx0XHR9O1xuXG5cdFx0Ly8gaGFuZGxlIG1lc3NhZ2VzIHRoYXQgYXJlIHNlc3Npb24tZGVwZW5kZW50XG5cdFx0Y2hlY2tTZXNzaW9uSXRlbXMuZm9yRWFjaChmdW5jdGlvbiAoY3VycmVudFNlc3Npb25NZXNzYWdlKSB7XG5cdFx0XHRjb25zdCBiYW5uZXJTZXNzaW9uQ291bnQgPSBwYXJzZUludChcblx0XHRcdFx0Y3VycmVudFNlc3Npb25NZXNzYWdlLmRhdGFzZXQuc2Vzc2lvbkNvdW50VG9DaGVja1xuXHRcdFx0KTtcblx0XHRcdGNvbnN0IGJhbm5lclNlc3Npb25PcGVyYXRvciA9XG5cdFx0XHRcdGN1cnJlbnRTZXNzaW9uTWVzc2FnZS5kYXRhc2V0LnNlc3Npb25Db3VudE9wZXJhdG9yO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRvcGVyYXRvcnNbYmFubmVyU2Vzc2lvbk9wZXJhdG9yXShcblx0XHRcdFx0XHRjdXJyZW50Q291bnQsXG5cdFx0XHRcdFx0YmFubmVyU2Vzc2lvbkNvdW50XG5cdFx0XHRcdClcblx0XHRcdCkge1xuXHRcdFx0XHRpZiAoY3VycmVudFNlc3Npb25NZXNzYWdlLmNsYXNzTGlzdC5jb250YWlucyhwb3B1cFNlbGVjdG9yKSkge1xuXHRcdFx0XHRcdGN1cnJlbnRTZXNzaW9uTWVzc2FnZS5jbGFzc0xpc3QuYWRkKHZhbGlkYXRlZFNlc3Npb25DbGFzcyk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoIWdldENvb2tpZShwb3B1cFNob3duQ29va2llTmFtZSkpIHtcblx0XHRcdFx0XHRjdXJyZW50U2Vzc2lvbk1lc3NhZ2UuY2xhc3NMaXN0LmFkZCh2YWxpZGF0ZWRTZXNzaW9uQ2xhc3MpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRjb25zdCBwb3B1cE1lc3NhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuJyArIHBvcHVwU2VsZWN0b3IpO1xuXHRpZiAobnVsbCAhPT0gcG9wdXBNZXNzYWdlKSB7XG5cdFx0Ly8gZ2V0IG91ciB2YWx1ZSBmb3IgZGF5cyBhbmQgaG91cnMgdG8gc2V0IGNvb2tpZVxuXHRcdGNvbnN0IGNsb3NlVGltZURheXMgPSBwYXJzZUludChwb3B1cE1lc3NhZ2UuZGF0YXNldC5jbG9zZVRpbWVEYXlzKSB8fCAwO1xuXHRcdGNvbnN0IGNsb3NlVGltZUhvdXJzID1cblx0XHRcdChwYXJzZUludChwb3B1cE1lc3NhZ2UuZGF0YXNldC5jbG9zZVRpbWVIb3VycykgfHwgMCkgLyAyNDtcblx0XHQvLyBPdXIgVG90YWwgZm9yIHdoZW4gdGhlIGNvb2tpZSBzaG91bGQgZXhwaXJlIGFuZCBzaG93IHRoZSBiYW5uZXIgYWdhaW5cblx0XHRjb25zdCBjb29raWVEYXlUb3RhbCA9IGNsb3NlVGltZURheXMgKyBjbG9zZVRpbWVIb3Vycztcblx0XHQvLyBkZXRlcm1pbmVzIHdoZXRoZXIgdG8gZGlzcGxheSBhIHBvcHVwXG5cdFx0cG9wdXBEaXNwbGF5KFxuXHRcdFx0cG9wdXBNZXNzYWdlLFxuXHRcdFx0Y29va2llRGF5VG90YWwsXG5cdFx0XHRwb3B1cFNob3duQ29va2llTmFtZSxcblx0XHRcdHBvcHVwVmlzaWJsZUNsYXNzLFxuXHRcdFx0Y2hlY2tTZXNzaW9uQ2xhc3MsXG5cdFx0XHR2YWxpZGF0ZWRTZXNzaW9uQ2xhc3Ncblx0XHQpO1xuXHR9XG5cblx0Ly8gYW5hbHl0aWNzIGV2ZW50cyBmb3IgYW55IGtpbmQgb2YgbWVzc2FnZSB0aGF0IGlzIGRpc3BsYXllZFxuXHRjb25zdCBtZXNzYWdlSXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxuXHRcdCcuJyArIG1lc3NhZ2VTZWxlY3RvciArICc6bm90KCAuJyArIHBvcHVwU2VsZWN0b3IgKyAnICknXG5cdCk7XG5cdGlmICgwIDwgbWVzc2FnZUl0ZW1zLmxlbmd0aCkge1xuXHRcdG1lc3NhZ2VJdGVtcy5mb3JFYWNoKGZ1bmN0aW9uIChjdXJyZW50TWVzc2FnZSkge1xuXHRcdFx0bWVzc2FnZUFuYWx5dGljcyhjdXJyZW50TWVzc2FnZSk7XG5cdFx0fSk7XG5cdH1cbn0pO1xuIl19
