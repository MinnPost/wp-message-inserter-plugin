;(function($) {
"use strict";

/**
 * Sets cookies
 *
 * @param {string} name
 * @param {string} value
 * @param {number} days
 */
function setCookie(name, value, days) {
  var d = new Date();
  d.setTime(d.getTime() + 86400000 * days);
  document.cookie = name + '=' + value + ';path=/;expires=' + d.toGMTString();
}
/**
 * Reads cookies
 *
 * @param {string} name
 */


function getCookie(name) {
  var v = document.cookie.match('(^|;) ?' + name + '=([^;]*)(;|$)');
  return v ? v[2] : null;
}
/**
 * Creating Analytics events
 *
 * @param {string} type
 * @param {string} category
 * @param {string} action
 * @param {string} label
 * @param {Array} value
 */


function analyticsTrackingEvent(type, category, action, label, value) {
  category = 'Site Message: ' + category.charAt(0).toUpperCase() + category.slice(1);

  if ('undefined' !== typeof ga) {
    if ('undefined' === typeof value) {
      ga('send', type, category, action, label);
    } else {
      ga('send', type, category, action, label, value);
    }
  } else {}
}
/**
 * Faux "Session" checking/setting
 *
 * @return {number} currentCount
 */


function setCurrentCount() {
  // Timestamp stored on the cookie
  var currentCount = getCookie('count');
  var timestamp = Math.floor(new Date().getTime() / 1000);
  var cookieExpiration = 30; // expire the cooke in 30 days

  if (!getCookie('count')) {
    // First Visit - set count to 1
    setCookie('count', 1, cookieExpiration); // Set a timecheck cookie for an hour from now

    setCookie('timecheck', timestamp + 3600, cookieExpiration);
  } else if (timestamp > getCookie('timecheck')) {
    // Update Timecheck to new value
    setCookie('timecheck', timestamp + 3600, cookieExpiration); // Count exists already and it has been an hour. Update count

    setCookie('count', ++currentCount, cookieExpiration);
  }

  var urlParams = new URLSearchParams(window.location.search);

  if (urlParams.get('count') !== null) {
    currentCount = parseInt(urlParams.get('count'));
  }

  return currentCount;
}
/**
 * Get the WordPress post ID for a given popup.
 *
 * @param {string} popupSelector
 * @return {number} postId
 */


function getPostId(popupSelector) {
  var postId = 0;
  var classList = $('.' + popupSelector).attr('class').split(/\s+/);
  $.each(classList, function (index, item) {
    if (0 < item.indexOf('message-id')) {
      postId = item.substring(item.lastIndexOf('-') + 1);
      return false; // break each and postId will be returned
    }
  });
  return postId;
}
/**
 * Get the region for a given message.
 *
 * @param {Object} message
 * @return {string} region
 */


function getMessageRegion(message) {
  var region = '';
  var classList = $(message).attr('class').split(/\s+/);
  $.each(classList, function (index, item) {
    if (0 < item.indexOf('message-region')) {
      region = item.substring(item.lastIndexOf('-') + 1);
      return false; // break each and region will be returned
    }
  });
  return region;
}
/**
 * Show a specific popup. Sets a cookie and adds a visibility class.
 *
 * @param {string} popupSelector
 * @param {number} cookieDayTotal
 * @param {string} popupShownCookieName
 * @param {string} popupVisibleClass
 */


function showPopup(popupSelector, cookieDayTotal, popupShownCookieName, popupVisibleClass) {
  var popupId = 0;
  setCookie(popupShownCookieName, 'true', cookieDayTotal);

  if (0 < $('.validated').length) {
    $('.' + popupSelector + '.validated').addClass(popupVisibleClass);
    popupId = getPostId(popupSelector + '.validated');
  } else {
    $('.' + popupSelector + ':first').addClass(popupVisibleClass);
    popupId = getPostId(popupSelector + ':first');
  }

  if (0 !== popupId) {
    analyticsTrackingEvent('event', 'Popup', 'Show', popupId, {
      nonInteraction: 1
    });
  }
}
/**
 * Show a specific popup. Sets a cookie and adds a visibility class.
 *
 * @param {string} popupSelector
 * @param {string} popupVisibleClass
 * @param {Object} lastFocus
 * @param {string} closeTrigger
 */


function hidePopup(popupSelector, popupVisibleClass, lastFocus, closeTrigger) {
  lastFocus.focus();
  $('.' + popupSelector).removeClass(popupVisibleClass);
  var popupId = getPostId(popupSelector);

  if (0 !== popupId) {
    analyticsTrackingEvent('event', 'Popup', closeTrigger, popupId, {
      nonInteraction: 1
    });
  }
}
/**
 * Display and controls for popups
 *
 * @param {string} popupSelector
 * @param {number} cookieDayTotal
 * @param {string} popupShownCookieName
 * @param {string} popupVisibleClass
 * @param {string} checkSessionClass
 */


function popupDisplay(popupSelector, cookieDayTotal, popupShownCookieName, popupVisibleClass, checkSessionClass) {
  var lastFocus = document.activeElement; // Check if we should be showing the popup

  if ('true' !== getCookie(popupShownCookieName) && !$('.' + popupSelector).hasClass(checkSessionClass)) {
    showPopup(popupSelector, cookieDayTotal, popupShownCookieName, popupVisibleClass);
  } // click on login link inside popup


  $('.' + popupSelector).on('click', '.message-login', function () {
    var url = $(this).attr('href');
    analyticsTrackingEvent('event', 'Popup', 'Login Link', url);
  });
  document.addEventListener('click', function (event) {
    if (!$(event.target).closest('.' + popupSelector).is('.' + popupSelector) && $('.' + popupSelector).hasClass(popupVisibleClass)) {
      hidePopup(popupSelector, popupVisibleClass, lastFocus, 'Click Outside to Close');
    }
  }, true); // popup close button

  $('.' + popupSelector).on('click', '.sm-close-btn', function (e) {
    e.preventDefault();
    hidePopup(popupSelector, popupVisibleClass, lastFocus, 'Close Button');
  }); // escape key press

  $(document).keyup(function (e) {
    if (27 === e.keyCode) {
      hidePopup(popupSelector, popupVisibleClass, lastFocus, 'Escape Key');
    }
  }); // click on a non-login or close link inside popup

  $('.' + popupSelector).on('click', 'a:not( .sm-close-btn, .message-login )', function () {
    var popupId = getPostId(popupSelector);
    analyticsTrackingEvent('event', 'Popup', 'Click', popupId);
  });
}

function messageAnalytics(message) {
  var messageRegion = getMessageRegion('.' + message);
  var messageId = getPostId(message);

  if ($('.' + message).is(':visible')) {
    analyticsTrackingEvent('event', messageRegion, 'Show', messageId, {
      nonInteraction: 1
    });
  } // click on login link inside a message


  $('.' + message).on('click', '.message-login', function () {
    var url = $(this).attr('href');
    analyticsTrackingEvent('event', messageRegion, 'Login Link', url);
  }); // click on a non-login or close link inside a message

  $('.' + message).on('click', 'a:not( .sm-close-btn, .message-login )', function () {
    analyticsTrackingEvent('event', messageRegion, 'Click', messageId);
  });
}
/**
 * When jQuery is loaded, set up session tracking and popup display
 *
 */


$(document).ready(function () {
  var popupSelector = 'wp-message-inserter-message-region-popup';
  var popupShownCookieName = 'sm-shown';
  var popupVisibleClass = 'wp-message-inserter-message-popup-visible';
  var checkSessionClass = 'check-session-message';
  var messageSelector = 'wp-message-inserter-message'; // Get our value for days and hours to set cookie

  var closeTimeDays = parseInt($('.' + popupSelector).data('close-time-days')) || 0;
  var closeTimeHours = (parseInt($('.' + popupSelector).data('close-time-hours')) || 0) / 24; // Our Total for when the cookie should expire and show the banner again

  var cookieDayTotal = closeTimeDays + closeTimeHours; // Session Validating and showing proper banner

  var operators = {
    gt: function gt(a, b) {
      return a >= b;
    },
    lt: function lt(a, b) {
      return a <= b;
    }
  };
  var currentCount = setCurrentCount();

  if (0 < $('.' + checkSessionClass).length) {
    $('.' + checkSessionClass).each(function () {
      var bannerSessionCount = parseInt($(this).data('session-count-to-check'));
      var bannerSessionOperator = $(this).data('session-count-operator');

      if (operators[bannerSessionOperator](currentCount, bannerSessionCount)) {
        if (!$(this).hasClass(popupSelector)) {
          $(this).addClass('validated');
        } else if (!getCookie(popupShownCookieName)) {
          $(this).addClass('validated');
        }
      }
    });
  }

  if (0 < $('.' + popupSelector).length) {
    popupDisplay(popupSelector, cookieDayTotal, popupShownCookieName, popupVisibleClass);
  }

  if (0 < $('.' + messageSelector + ':not( .' + popupSelector + ' )').length) {
    messageAnalytics(messageSelector + ':not( .' + popupSelector + ' )');
  }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIjAxLW1lc3NhZ2VzLmpzIl0sIm5hbWVzIjpbInNldENvb2tpZSIsIm5hbWUiLCJ2YWx1ZSIsImRheXMiLCJkIiwiRGF0ZSIsInNldFRpbWUiLCJnZXRUaW1lIiwiZG9jdW1lbnQiLCJjb29raWUiLCJ0b0dNVFN0cmluZyIsImdldENvb2tpZSIsInYiLCJtYXRjaCIsImFuYWx5dGljc1RyYWNraW5nRXZlbnQiLCJ0eXBlIiwiY2F0ZWdvcnkiLCJhY3Rpb24iLCJsYWJlbCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJnYSIsInNldEN1cnJlbnRDb3VudCIsImN1cnJlbnRDb3VudCIsInRpbWVzdGFtcCIsIk1hdGgiLCJmbG9vciIsImNvb2tpZUV4cGlyYXRpb24iLCJ1cmxQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInNlYXJjaCIsImdldCIsInBhcnNlSW50IiwiZ2V0UG9zdElkIiwicG9wdXBTZWxlY3RvciIsInBvc3RJZCIsImNsYXNzTGlzdCIsIiQiLCJhdHRyIiwic3BsaXQiLCJlYWNoIiwiaW5kZXgiLCJpdGVtIiwiaW5kZXhPZiIsInN1YnN0cmluZyIsImxhc3RJbmRleE9mIiwiZ2V0TWVzc2FnZVJlZ2lvbiIsIm1lc3NhZ2UiLCJyZWdpb24iLCJzaG93UG9wdXAiLCJjb29raWVEYXlUb3RhbCIsInBvcHVwU2hvd25Db29raWVOYW1lIiwicG9wdXBWaXNpYmxlQ2xhc3MiLCJwb3B1cElkIiwibGVuZ3RoIiwiYWRkQ2xhc3MiLCJub25JbnRlcmFjdGlvbiIsImhpZGVQb3B1cCIsImxhc3RGb2N1cyIsImNsb3NlVHJpZ2dlciIsImZvY3VzIiwicmVtb3ZlQ2xhc3MiLCJwb3B1cERpc3BsYXkiLCJjaGVja1Nlc3Npb25DbGFzcyIsImFjdGl2ZUVsZW1lbnQiLCJoYXNDbGFzcyIsIm9uIiwidXJsIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwidGFyZ2V0IiwiY2xvc2VzdCIsImlzIiwiZSIsInByZXZlbnREZWZhdWx0Iiwia2V5dXAiLCJrZXlDb2RlIiwibWVzc2FnZUFuYWx5dGljcyIsIm1lc3NhZ2VSZWdpb24iLCJtZXNzYWdlSWQiLCJyZWFkeSIsIm1lc3NhZ2VTZWxlY3RvciIsImNsb3NlVGltZURheXMiLCJkYXRhIiwiY2xvc2VUaW1lSG91cnMiLCJvcGVyYXRvcnMiLCJndCIsImEiLCJiIiwibHQiLCJiYW5uZXJTZXNzaW9uQ291bnQiLCJiYW5uZXJTZXNzaW9uT3BlcmF0b3IiXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7QUFPQSxTQUFTQSxTQUFULENBQW9CQyxJQUFwQixFQUEwQkMsS0FBMUIsRUFBaUNDLElBQWpDLEVBQXdDO0FBQ3ZDLE1BQU1DLENBQUMsR0FBRyxJQUFJQyxJQUFKLEVBQVY7QUFDQUQsRUFBQUEsQ0FBQyxDQUFDRSxPQUFGLENBQVdGLENBQUMsQ0FBQ0csT0FBRixLQUFjLFdBQVdKLElBQXBDO0FBQ0FLLEVBQUFBLFFBQVEsQ0FBQ0MsTUFBVCxHQUFrQlIsSUFBSSxHQUFHLEdBQVAsR0FBYUMsS0FBYixHQUFxQixrQkFBckIsR0FBMENFLENBQUMsQ0FBQ00sV0FBRixFQUE1RDtBQUNBO0FBRUQ7Ozs7Ozs7QUFLQSxTQUFTQyxTQUFULENBQW9CVixJQUFwQixFQUEyQjtBQUMxQixNQUFNVyxDQUFDLEdBQUdKLFFBQVEsQ0FBQ0MsTUFBVCxDQUFnQkksS0FBaEIsQ0FBdUIsWUFBWVosSUFBWixHQUFtQixlQUExQyxDQUFWO0FBQ0EsU0FBT1csQ0FBQyxHQUFHQSxDQUFDLENBQUUsQ0FBRixDQUFKLEdBQVksSUFBcEI7QUFDQTtBQUVEOzs7Ozs7Ozs7OztBQVNBLFNBQVNFLHNCQUFULENBQWlDQyxJQUFqQyxFQUF1Q0MsUUFBdkMsRUFBaURDLE1BQWpELEVBQXlEQyxLQUF6RCxFQUFnRWhCLEtBQWhFLEVBQXdFO0FBQ3ZFYyxFQUFBQSxRQUFRLEdBQ1AsbUJBQ0FBLFFBQVEsQ0FBQ0csTUFBVCxDQUFpQixDQUFqQixFQUFxQkMsV0FBckIsRUFEQSxHQUVBSixRQUFR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QUE4QyxJQUFoRCxDQUFoQjtBQUNBO0FBQ0QsQ0FqRUQiLCJmaWxlIjoid3AtbWVzc2FnZS1pbnNlcnRlci1wbHVnaW4tZnJvbnQtZW5kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTZXRzIGNvb2tpZXNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcn0gZGF5c1xuICovXG5mdW5jdGlvbiBzZXRDb29raWUoIG5hbWUsIHZhbHVlLCBkYXlzICkge1xuXHRjb25zdCBkID0gbmV3IERhdGUoKTtcblx0ZC5zZXRUaW1lKCBkLmdldFRpbWUoKSArIDg2NDAwMDAwICogZGF5cyApO1xuXHRkb2N1bWVudC5jb29raWUgPSBuYW1lICsgJz0nICsgdmFsdWUgKyAnO3BhdGg9LztleHBpcmVzPScgKyBkLnRvR01UU3RyaW5nKCk7XG59XG5cbi8qKlxuICogUmVhZHMgY29va2llc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKi9cbmZ1bmN0aW9uIGdldENvb2tpZSggbmFtZSApIHtcblx0Y29uc3QgdiA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaCggJyhefDspID8nICsgbmFtZSArICc9KFteO10qKSg7fCQpJyApO1xuXHRyZXR1cm4gdiA/IHZbIDIgXSA6IG51bGw7XG59XG5cbi8qKlxuICogQ3JlYXRpbmcgQW5hbHl0aWNzIGV2ZW50c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0ge3N0cmluZ30gY2F0ZWdvcnlcbiAqIEBwYXJhbSB7c3RyaW5nfSBhY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSBsYWJlbFxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVcbiAqL1xuZnVuY3Rpb24gYW5hbHl0aWNzVHJhY2tpbmdFdmVudCggdHlwZSwgY2F0ZWdvcnksIGFjdGlvbiwgbGFiZWwsIHZhbHVlICkge1xuXHRjYXRlZ29yeSA9XG5cdFx0J1NpdGUgTWVzc2FnZTogJyArXG5cdFx0Y2F0ZWdvcnkuY2hhckF0KCAwICkudG9VcHBlckNhc2UoKSArXG5cdFx0Y2F0ZWdvcnkuc2xpY2UoIDEgKTtcblx0aWYgKCAndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGdhICkge1xuXHRcdGlmICggJ3VuZGVmaW5lZCcgPT09IHR5cGVvZiB2YWx1ZSApIHtcblx0XHRcdGdhKCAnc2VuZCcsIHR5cGUsIGNhdGVnb3J5LCBhY3Rpb24sIGxhYmVsICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGdhKCAnc2VuZCcsIHR5cGUsIGNhdGVnb3J5LCBhY3Rpb24sIGxhYmVsLCB2YWx1ZSApO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0fVxufVxuXG4vKipcbiAqIEZhdXggXCJTZXNzaW9uXCIgY2hlY2tpbmcvc2V0dGluZ1xuICpcbiAqIEByZXR1cm4ge251bWJlcn0gY3VycmVudENvdW50XG4gKi9cbmZ1bmN0aW9uIHNldEN1cnJlbnRDb3VudCgpIHtcblx0Ly8gVGltZXN0YW1wIHN0b3JlZCBvbiB0aGUgY29va2llXG5cdGxldCBjdXJyZW50Q291bnQgPSBnZXRDb29raWUoICdjb3VudCcgKTtcblx0Y29uc3QgdGltZXN0YW1wID0gTWF0aC5mbG9vciggbmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwICk7XG5cdGNvbnN0IGNvb2tpZUV4cGlyYXRpb24gPSAzMDsgLy8gZXhwaXJlIHRoZSBjb29rZSBpbiAzMCBkYXlzXG5cdGlmICggISBnZXRDb29raWUoICdjb3VudCcgKSApIHtcblx0XHQvLyBGaXJzdCBWaXNpdCAtIHNldCBjb3VudCB0byAxXG5cdFx0c2V0Q29va2llKCAnY291bnQnLCAxLCBjb29raWVFeHBpcmF0aW9uICk7XG5cdFx0Ly8gU2V0IGEgdGltZWNoZWNrIGNvb2tpZSBmb3IgYW4gaG91ciBmcm9tIG5vd1xuXHRcdHNldENvb2tpZSggJ3RpbWVjaGVjaycsIHRpbWVzdGFtcCArIDM2MDAsIGNvb2tpZUV4cGlyYXRpb24gKTtcblx0fSBlbHNlIGlmICggdGltZXN0YW1wID4gZ2V0Q29va2llKCAndGltZWNoZWNrJyApICkge1xuXHRcdC8vIFVwZGF0ZSBUaW1lY2hlY2sgdG8gbmV3IHZhbHVlXG5cdFx0c2V0Q29va2llKCAndGltZWNoZWNrJywgdGltZXN0YW1wICsgMzYwMCwgY29va2llRXhwaXJhdGlvbiApO1xuXHRcdC8vIENvdW50IGV4aXN0cyBhbHJlYWR5IGFuZCBpdCBoYXMgYmVlbiBhbiBob3VyLiBVcGRhdGUgY291bnRcblx0XHRzZXRDb29raWUoICdjb3VudCcsICsrY3VycmVudENvdW50LCBjb29raWVFeHBpcmF0aW9uICk7XG5cdH1cblx0Y29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyggd2luZG93LmxvY2F0aW9uLnNlYXJjaCApO1xuXHRpZiAoIHVybFBhcmFtcy5nZXQoICdjb3VudCcgKSAhPT0gbnVsbCApIHtcblx0XHRjdXJyZW50Q291bnQgPSBwYXJzZUludCggdXJsUGFyYW1zLmdldCggJ2NvdW50JyApICk7XG5cdH1cblx0cmV0dXJuIGN1cnJlbnRDb3VudDtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIFdvcmRQcmVzcyBwb3N0IElEIGZvciBhIGdpdmVuIHBvcHVwLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBwb3B1cFNlbGVjdG9yXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHBvc3RJZFxuICovXG5mdW5jdGlvbiBnZXRQb3N0SWQoIHBvcHVwU2VsZWN0b3IgKSB7XG5cdGxldCBwb3N0SWQgPSAwO1xuXHRjb25zdCBjbGFzc0xpc3QgPSAkKCAnLicgKyBwb3B1cFNlbGVjdG9yIClcblx0XHQuYXR0ciggJ2NsYXNzJyApXG5cdFx0LnNwbGl0KCAvXFxzKy8gKTtcblx0JC5lYWNoKCBjbGFzc0xpc3QsIGZ1bmN0aW9uKCBpbmRleCwgaXRlbSApIHtcblx0XHRpZiAoIDAgPCBpdGVtLmluZGV4T2YoICdtZXNzYWdlLWlkJyApICkge1xuXHRcdFx0cG9zdElkID0gaXRlbS5zdWJzdHJpbmcoIGl0ZW0ubGFzdEluZGV4T2YoICctJyApICsgMSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlOyAvLyBicmVhayBlYWNoIGFuZCBwb3N0SWQgd2lsbCBiZSByZXR1cm5lZFxuXHRcdH1cblx0fSApO1xuXHRyZXR1cm4gcG9zdElkO1xufVxuXG4vKipcbiAqIEdldCB0aGUgcmVnaW9uIGZvciBhIGdpdmVuIG1lc3NhZ2UuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG1lc3NhZ2VcbiAqIEByZXR1cm4ge3N0cmluZ30gcmVnaW9uXG4gKi9cbmZ1bmN0aW9uIGdldE1lc3NhZ2VSZWdpb24oIG1lc3NhZ2UgKSB7XG5cdGxldCByZWdpb24gPSAnJztcblx0Y29uc3QgY2xhc3NMaXN0ID0gJCggbWVzc2FnZSApXG5cdFx0LmF0dHIoICdjbGFzcycgKVxuXHRcdC5zcGxpdCggL1xccysvICk7XG5cdCQuZWFjaCggY2xhc3NMaXN0LCBmdW5jdGlvbiggaW5kZXgsIGl0ZW0gKSB7XG5cdFx0aWYgKCAwIDwgaXRlbS5pbmRleE9mKCAnbWVzc2FnZS1yZWdpb24nICkgKSB7XG5cdFx0XHRyZWdpb24gPSBpdGVtLnN1YnN0cmluZyggaXRlbS5sYXN0SW5kZXhPZiggJy0nICkgKyAxICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7IC8vIGJyZWFrIGVhY2ggYW5kIHJlZ2lvbiB3aWxsIGJlIHJldHVybmVkXG5cdFx0fVxuXHR9ICk7XG5cdHJldHVybiByZWdpb247XG59XG5cbi8qKlxuICogU2hvdyBhIHNwZWNpZmljIHBvcHVwLiBTZXRzIGEgY29va2llIGFuZCBhZGRzIGEgdmlzaWJpbGl0eSBjbGFzcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcG9wdXBTZWxlY3RvclxuICogQHBhcmFtIHtudW1iZXJ9IGNvb2tpZURheVRvdGFsXG4gKiBAcGFyYW0ge3N0cmluZ30gcG9wdXBTaG93bkNvb2tpZU5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBwb3B1cFZpc2libGVDbGFzc1xuICovXG5mdW5jdGlvbiBzaG93UG9wdXAoXG5cdHBvcHVwU2VsZWN0b3IsXG5cdGNvb2tpZURheVRvdGFsLFxuXHRwb3B1cFNob3duQ29va2llTmFtZSxcblx0cG9wdXBWaXNpYmxlQ2xhc3Ncbikge1xuXHRsZXQgcG9wdXBJZCA9IDA7XG5cdHNldENvb2tpZSggcG9wdXBTaG93bkNvb2tpZU5hbWUsICd0cnVlJywgY29va2llRGF5VG90YWwgKTtcblx0aWYgKCAwIDwgJCggJy52YWxpZGF0ZWQnICkubGVuZ3RoICkge1xuXHRcdCQoICcuJyArIHBvcHVwU2VsZWN0b3IgKyAnLnZhbGlkYXRlZCcgKS5hZGRDbGFzcyggcG9wdXBWaXNpYmxlQ2xhc3MgKTtcblx0XHRwb3B1cElkID0gZ2V0UG9zdElkKCBwb3B1cFNlbGVjdG9yICsgJy52YWxpZGF0ZWQnICk7XG5cdH0gZWxzZSB7XG5cdFx0JCggJy4nICsgcG9wdXBTZWxlY3RvciArICc6Zmlyc3QnICkuYWRkQ2xhc3MoIHBvcHVwVmlzaWJsZUNsYXNzICk7XG5cdFx0cG9wdXBJZCA9IGdldFBvc3RJZCggcG9wdXBTZWxlY3RvciArICc6Zmlyc3QnICk7XG5cdH1cblx0aWYgKCAwICE9PSBwb3B1cElkICkge1xuXHRcdGFuYWx5dGljc1RyYWNraW5nRXZlbnQoICdldmVudCcsICdQb3B1cCcsICdTaG93JywgcG9wdXBJZCwge1xuXHRcdFx0bm9uSW50ZXJhY3Rpb246IDEsXG5cdFx0fSApO1xuXHR9XG59XG5cbi8qKlxuICogU2hvdyBhIHNwZWNpZmljIHBvcHVwLiBTZXRzIGEgY29va2llIGFuZCBhZGRzIGEgdmlzaWJpbGl0eSBjbGFzcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcG9wdXBTZWxlY3RvclxuICogQHBhcmFtIHtzdHJpbmd9IHBvcHVwVmlzaWJsZUNsYXNzXG4gKiBAcGFyYW0ge09iamVjdH0gbGFzdEZvY3VzXG4gKiBAcGFyYW0ge3N0cmluZ30gY2xvc2VUcmlnZ2VyXG4gKi9cbmZ1bmN0aW9uIGhpZGVQb3B1cChcblx0cG9wdXBTZWxlY3Rvcixcblx0cG9wdXBWaXNpYmxlQ2xhc3MsXG5cdGxhc3RGb2N1cyxcblx0Y2xvc2VUcmlnZ2VyXG4pIHtcblx0bGFzdEZvY3VzLmZvY3VzKCk7XG5cdCQoICcuJyArIHBvcHVwU2VsZWN0b3IgKS5yZW1vdmVDbGFzcyggcG9wdXBWaXNpYmxlQ2xhc3MgKTtcblx0Y29uc3QgcG9wdXBJZCA9IGdldFBvc3RJZCggcG9wdXBTZWxlY3RvciApO1xuXHRpZiAoIDAgIT09IHBvcHVwSWQgKSB7XG5cdFx0YW5hbHl0aWNzVHJhY2tpbmdFdmVudCggJ2V2ZW50JywgJ1BvcHVwJywgY2xvc2VUcmlnZ2VyLCBwb3B1cElkLCB7XG5cdFx0XHRub25JbnRlcmFjdGlvbjogMSxcblx0XHR9ICk7XG5cdH1cbn1cblxuLyoqXG4gKiBEaXNwbGF5IGFuZCBjb250cm9scyBmb3IgcG9wdXBzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBvcHVwU2VsZWN0b3JcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb29raWVEYXlUb3RhbFxuICogQHBhcmFtIHtzdHJpbmd9IHBvcHVwU2hvd25Db29raWVOYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gcG9wdXBWaXNpYmxlQ2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nfSBjaGVja1Nlc3Npb25DbGFzc1xuICovXG5mdW5jdGlvbiBwb3B1cERpc3BsYXkoXG5cdHBvcHVwU2VsZWN0b3IsXG5cdGNvb2tpZURheVRvdGFsLFxuXHRwb3B1cFNob3duQ29va2llTmFtZSxcblx0cG9wdXBWaXNpYmxlQ2xhc3MsXG5cdGNoZWNrU2Vzc2lvbkNsYXNzXG4pIHtcblx0Y29uc3QgbGFzdEZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0Ly8gQ2hlY2sgaWYgd2Ugc2hvdWxkIGJlIHNob3dpbmcgdGhlIHBvcHVwXG5cdGlmIChcblx0XHQndHJ1ZScgIT09IGdldENvb2tpZSggcG9wdXBTaG93bkNvb2tpZU5hbWUgKSAmJlxuXHRcdCEgJCggJy4nICsgcG9wdXBTZWxlY3RvciApLmhhc0NsYXNzKCBjaGVja1Nlc3Npb25DbGFzcyApXG5cdCkge1xuXHRcdHNob3dQb3B1cChcblx0XHRcdHBvcHVwU2VsZWN0b3IsXG5cdFx0XHRjb29raWVEYXlUb3RhbCxcblx0XHRcdHBvcHVwU2hvd25Db29raWVOYW1lLFxuXHRcdFx0cG9wdXBWaXNpYmxlQ2xhc3Ncblx0XHQpO1xuXHR9XG5cblx0Ly8gY2xpY2sgb24gbG9naW4gbGluayBpbnNpZGUgcG9wdXBcblx0JCggJy4nICsgcG9wdXBTZWxlY3RvciApLm9uKCAnY2xpY2snLCAnLm1lc3NhZ2UtbG9naW4nLCBmdW5jdGlvbigpIHtcblx0XHRjb25zdCB1cmwgPSAkKCB0aGlzICkuYXR0ciggJ2hyZWYnICk7XG5cdFx0YW5hbHl0aWNzVHJhY2tpbmdFdmVudCggJ2V2ZW50JywgJ1BvcHVwJywgJ0xvZ2luIExpbmsnLCB1cmwgKTtcblx0fSApO1xuXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG5cdFx0J2NsaWNrJyxcblx0XHRmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdCEgJCggZXZlbnQudGFyZ2V0IClcblx0XHRcdFx0XHQuY2xvc2VzdCggJy4nICsgcG9wdXBTZWxlY3RvciApXG5cdFx0XHRcdFx0LmlzKCAnLicgKyBwb3B1cFNlbGVjdG9yICkgJiZcblx0XHRcdFx0JCggJy4nICsgcG9wdXBTZWxlY3RvciApLmhhc0NsYXNzKCBwb3B1cFZpc2libGVDbGFzcyApXG5cdFx0XHQpIHtcblx0XHRcdFx0aGlkZVBvcHVwKFxuXHRcdFx0XHRcdHBvcHVwU2VsZWN0b3IsXG5cdFx0XHRcdFx0cG9wdXBWaXNpYmxlQ2xhc3MsXG5cdFx0XHRcdFx0bGFzdEZvY3VzLFxuXHRcdFx0XHRcdCdDbGljayBPdXRzaWRlIHRvIENsb3NlJ1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0dHJ1ZVxuXHQpO1xuXG5cdC8vIHBvcHVwIGNsb3NlIGJ1dHRvblxuXHQkKCAnLicgKyBwb3B1cFNlbGVjdG9yICkub24oICdjbGljaycsICcuc20tY2xvc2UtYnRuJywgZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdGhpZGVQb3B1cChcblx0XHRcdHBvcHVwU2VsZWN0b3IsXG5cdFx0XHRwb3B1cFZpc2libGVDbGFzcyxcblx0XHRcdGxhc3RGb2N1cyxcblx0XHRcdCdDbG9zZSBCdXR0b24nXG5cdFx0KTtcblx0fSApO1xuXG5cdC8vIGVzY2FwZSBrZXkgcHJlc3Ncblx0JCggZG9jdW1lbnQgKS5rZXl1cCggZnVuY3Rpb24oIGUgKSB7XG5cdFx0aWYgKCAyNyA9PT0gZS5rZXlDb2RlICkge1xuXHRcdFx0aGlkZVBvcHVwKFxuXHRcdFx0XHRwb3B1cFNlbGVjdG9yLFxuXHRcdFx0XHRwb3B1cFZpc2libGVDbGFzcyxcblx0XHRcdFx0bGFzdEZvY3VzLFxuXHRcdFx0XHQnRXNjYXBlIEtleSdcblx0XHRcdCk7XG5cdFx0fVxuXHR9ICk7XG5cblx0Ly8gY2xpY2sgb24gYSBub24tbG9naW4gb3IgY2xvc2UgbGluayBpbnNpZGUgcG9wdXBcblx0JCggJy4nICsgcG9wdXBTZWxlY3RvciApLm9uKFxuXHRcdCdjbGljaycsXG5cdFx0J2E6bm90KCAuc20tY2xvc2UtYnRuLCAubWVzc2FnZS1sb2dpbiApJyxcblx0XHRmdW5jdGlvbigpIHtcblx0XHRcdGNvbnN0IHBvcHVwSWQgPSBnZXRQb3N0SWQoIHBvcHVwU2VsZWN0b3IgKTtcblx0XHRcdGFuYWx5dGljc1RyYWNraW5nRXZlbnQoICdldmVudCcsICdQb3B1cCcsICdDbGljaycsIHBvcHVwSWQgKTtcblx0XHR9XG5cdCk7XG59XG5cbmZ1bmN0aW9uIG1lc3NhZ2VBbmFseXRpY3MoIG1lc3NhZ2UgKSB7XG5cdGNvbnN0IG1lc3NhZ2VSZWdpb24gPSBnZXRNZXNzYWdlUmVnaW9uKCAnLicgKyBtZXNzYWdlICk7XG5cdGNvbnN0IG1lc3NhZ2VJZCA9IGdldFBvc3RJZCggbWVzc2FnZSApO1xuXHRpZiAoICQoICcuJyArIG1lc3NhZ2UgKS5pcyggJzp2aXNpYmxlJyApICkge1xuXHRcdGFuYWx5dGljc1RyYWNraW5nRXZlbnQoICdldmVudCcsIG1lc3NhZ2VSZWdpb24sICdTaG93JywgbWVzc2FnZUlkLCB7XG5cdFx0XHRub25JbnRlcmFjdGlvbjogMSxcblx0XHR9ICk7XG5cdH1cblx0Ly8gY2xpY2sgb24gbG9naW4gbGluayBpbnNpZGUgYSBtZXNzYWdlXG5cdCQoICcuJyArIG1lc3NhZ2UgKS5vbiggJ2NsaWNrJywgJy5tZXNzYWdlLWxvZ2luJywgZnVuY3Rpb24oKSB7XG5cdFx0Y29uc3QgdXJsID0gJCggdGhpcyApLmF0dHIoICdocmVmJyApO1xuXHRcdGFuYWx5dGljc1RyYWNraW5nRXZlbnQoICdldmVudCcsIG1lc3NhZ2VSZWdpb24sICdMb2dpbiBMaW5rJywgdXJsICk7XG5cdH0gKTtcblxuXHQvLyBjbGljayBvbiBhIG5vbi1sb2dpbiBvciBjbG9zZSBsaW5rIGluc2lkZSBhIG1lc3NhZ2Vcblx0JCggJy4nICsgbWVzc2FnZSApLm9uKFxuXHRcdCdjbGljaycsXG5cdFx0J2E6bm90KCAuc20tY2xvc2UtYnRuLCAubWVzc2FnZS1sb2dpbiApJyxcblx0XHRmdW5jdGlvbigpIHtcblx0XHRcdGFuYWx5dGljc1RyYWNraW5nRXZlbnQoXG5cdFx0XHRcdCdldmVudCcsXG5cdFx0XHRcdG1lc3NhZ2VSZWdpb24sXG5cdFx0XHRcdCdDbGljaycsXG5cdFx0XHRcdG1lc3NhZ2VJZFxuXHRcdFx0KTtcblx0XHR9XG5cdCk7XG59XG5cbi8qKlxuICogV2hlbiBqUXVlcnkgaXMgbG9hZGVkLCBzZXQgdXAgc2Vzc2lvbiB0cmFja2luZyBhbmQgcG9wdXAgZGlzcGxheVxuICpcbiAqL1xuJCggZG9jdW1lbnQgKS5yZWFkeSggZnVuY3Rpb24oKSB7XG5cdGNvbnN0IHBvcHVwU2VsZWN0b3IgPSAnd3AtbWVzc2FnZS1pbnNlcnRlci1tZXNzYWdlLXJlZ2lvbi1wb3B1cCc7XG5cdGNvbnN0IHBvcHVwU2hvd25Db29raWVOYW1lID0gJ3NtLXNob3duJztcblx0Y29uc3QgcG9wdXBWaXNpYmxlQ2xhc3MgPSAnd3AtbWVzc2FnZS1pbnNlcnRlci1tZXNzYWdlLXBvcHVwLXZpc2libGUnO1xuXHRjb25zdCBjaGVja1Nlc3Npb25DbGFzcyA9ICdjaGVjay1zZXNzaW9uLW1lc3NhZ2UnO1xuXHRjb25zdCBtZXNzYWdlU2VsZWN0b3IgPSAnd3AtbWVzc2FnZS1pbnNlcnRlci1tZXNzYWdlJztcblxuXHQvLyBHZXQgb3VyIHZhbHVlIGZvciBkYXlzIGFuZCBob3VycyB0byBzZXQgY29va2llXG5cdGNvbnN0IGNsb3NlVGltZURheXMgPVxuXHRcdHBhcnNlSW50KCAkKCAnLicgKyBwb3B1cFNlbGVjdG9yICkuZGF0YSggJ2Nsb3NlLXRpbWUtZGF5cycgKSApIHx8IDA7XG5cdGNvbnN0IGNsb3NlVGltZUhvdXJzID1cblx0XHQoIHBhcnNlSW50KCAkKCAnLicgKyBwb3B1cFNlbGVjdG9yICkuZGF0YSggJ2Nsb3NlLXRpbWUtaG91cnMnICkgKSB8fFxuXHRcdFx0MCApIC8gMjQ7XG5cdC8vIE91ciBUb3RhbCBmb3Igd2hlbiB0aGUgY29va2llIHNob3VsZCBleHBpcmUgYW5kIHNob3cgdGhlIGJhbm5lciBhZ2FpblxuXHRjb25zdCBjb29raWVEYXlUb3RhbCA9IGNsb3NlVGltZURheXMgKyBjbG9zZVRpbWVIb3VycztcblxuXHQvLyBTZXNzaW9uIFZhbGlkYXRpbmcgYW5kIHNob3dpbmcgcHJvcGVyIGJhbm5lclxuXHRjb25zdCBvcGVyYXRvcnMgPSB7XG5cdFx0Z3QoIGEsIGIgKSB7XG5cdFx0XHRyZXR1cm4gYSA+PSBiO1xuXHRcdH0sXG5cdFx0bHQoIGEsIGIgKSB7XG5cdFx0XHRyZXR1cm4gYSA8PSBiO1xuXHRcdH0sXG5cdH07XG5cblx0Y29uc3QgY3VycmVudENvdW50ID0gc2V0Q3VycmVudENvdW50KCk7XG5cblx0aWYgKCAwIDwgJCggJy4nICsgY2hlY2tTZXNzaW9uQ2xhc3MgKS5sZW5ndGggKSB7XG5cdFx0JCggJy4nICsgY2hlY2tTZXNzaW9uQ2xhc3MgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGNvbnN0IGJhbm5lclNlc3Npb25Db3VudCA9IHBhcnNlSW50KFxuXHRcdFx0XHQkKCB0aGlzICkuZGF0YSggJ3Nlc3Npb24tY291bnQtdG8tY2hlY2snIClcblx0XHRcdCk7XG5cdFx0XHRjb25zdCBiYW5uZXJTZXNzaW9uT3BlcmF0b3IgPSAkKCB0aGlzICkuZGF0YShcblx0XHRcdFx0J3Nlc3Npb24tY291bnQtb3BlcmF0b3InXG5cdFx0XHQpO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRvcGVyYXRvcnNbIGJhbm5lclNlc3Npb25PcGVyYXRvciBdKFxuXHRcdFx0XHRcdGN1cnJlbnRDb3VudCxcblx0XHRcdFx0XHRiYW5uZXJTZXNzaW9uQ291bnRcblx0XHRcdFx0KVxuXHRcdFx0KSB7XG5cdFx0XHRcdGlmICggISAkKCB0aGlzICkuaGFzQ2xhc3MoIHBvcHVwU2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHQkKCB0aGlzICkuYWRkQ2xhc3MoICd2YWxpZGF0ZWQnICk7XG5cdFx0XHRcdH0gZWxzZSBpZiAoICEgZ2V0Q29va2llKCBwb3B1cFNob3duQ29va2llTmFtZSApICkge1xuXHRcdFx0XHRcdCQoIHRoaXMgKS5hZGRDbGFzcyggJ3ZhbGlkYXRlZCcgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggMCA8ICQoICcuJyArIHBvcHVwU2VsZWN0b3IgKS5sZW5ndGggKSB7XG5cdFx0cG9wdXBEaXNwbGF5KFxuXHRcdFx0cG9wdXBTZWxlY3Rvcixcblx0XHRcdGNvb2tpZURheVRvdGFsLFxuXHRcdFx0cG9wdXBTaG93bkNvb2tpZU5hbWUsXG5cdFx0XHRwb3B1cFZpc2libGVDbGFzc1xuXHRcdCk7XG5cdH1cblxuXHRpZiAoXG5cdFx0MCA8ICQoICcuJyArIG1lc3NhZ2VTZWxlY3RvciArICc6bm90KCAuJyArIHBvcHVwU2VsZWN0b3IgKyAnICknICkubGVuZ3RoXG5cdCkge1xuXHRcdG1lc3NhZ2VBbmFseXRpY3MoIG1lc3NhZ2VTZWxlY3RvciArICc6bm90KCAuJyArIHBvcHVwU2VsZWN0b3IgKyAnICknICk7XG5cdH1cbn0gKTtcbiJdfQ==
}(jQuery));
